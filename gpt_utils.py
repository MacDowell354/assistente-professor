import os
import re
import random
from openai import OpenAI, OpenAIError

TRANSCRIPTS_PATH = os.path.join(os.path.dirname(__file__), "transcricoes.txt")
client = OpenAI()

OUT_OF_SCOPE_MSG = (
    "Desculpe, ainda n√£o tenho informa√ß√µes suficientes sobre esse tema espec√≠fico do curso. "
    "Por favor, envie outra pergunta ou consulte o material da aula."
)

GREETINGS = [
    "Ol√°, Doutor(a), seja muito bem-vindo(a)!",
    "Oi, Doutor(a), tudo bem? Como posso ajudar?",
    "Bem-vindo(a) de volta, Doutor(a)! Pronto(a) para evoluir seu consult√≥rio?",
    "Ol√°, Doutor(a)! Estou aqui para apoiar voc√™ no seu crescimento."
]

CLOSINGS = [
    "Ficou com alguma d√∫vida sobre esta aula, Doutor(a)?",
    "Deseja aprofundar algum ponto, seguir para a pr√≥xima aula, voltar, repetir ou escolher outro m√≥dulo?",
    "Se quiser, escolha uma op√ß√£o r√°pida abaixo ou pergunte de novo!",
    "Se quiser ir para outra aula, m√≥dulo ou tema, √© s√≥ pedir, Doutor(a).",
    "Essa resposta foi √∫til? Clique em üëç ou üëé."
]

AULAS_POR_MODULO = {
    1: ['1.1', '1.2', '1.3', '1.4', '1.5'],
    2: ['2.1', '2.2', '2.3', '2.4', '2.5', '2.6', '2.7', '2.8', '2.9'],
    3: ['3.1', '3.2', '3.3', '3.4', '3.5'],
    4: ['4.1', '4.2', '4.3', '4.4', '4.5'],
    5: ['5.1', '5.2', '5.3', '5.4', '5.5'],
    6: ['6.1', '6.2', '6.3', '6.4', '6.5'],
    7: ['7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9'],
}

def gerar_quick_replies(question, explicacao, history=None, progresso=None):
    opcoes = ["Aprofundar esta aula", "Pr√≥xima aula", "Tenho outra d√∫vida"]
    if progresso:
        modulo = progresso.get('modulo', 1)
        opcoes.append("Voltar para aula anterior")
        opcoes.append("Repetir esta aula")
        opcoes.append("Escolher m√≥dulo ou aula espec√≠fica")
        if modulo < 7:
            opcoes.append("Ir para o pr√≥ximo m√≥dulo")
        if modulo > 1:
            opcoes.append("Ir para o m√≥dulo anterior")
    return opcoes

def resposta_link(titulo, url, icone="üìÑ"):
    return f"<br><a class='chip' href='{url}' target='_blank'>{icone} {titulo}</a>"

def resposta_link_externo(titulo, url, icone="üîó"):
    return f"<br><a class='chip' href='{url}' target='_blank'>{icone} {titulo}</a>"

def detectar_cenario(pergunta: str) -> str:
    pergunta = pergunta.lower()
    if any(p in pergunta for p in ["quero fazer o curso completo", "come√ßar do in√≠cio", "me ensina tudo", "fazer o curso com voc√™"]):
        return "curso_completo"
    elif re.search(r'\bm[o√≥]dulo\s*\d+\b', pergunta) or re.search(r'\baula\s*\d+\.\d+\b', pergunta):
        return "navegacao_especifica"
    elif any(p in pergunta for p in ["voltar", "retornar", "anterior", "repetir aula"]):
        return "voltar"
    elif any(p in pergunta for p in ["assisti", "j√° vi a aula", "tenho uma d√∫vida", "n√£o entendi", "poderia explicar melhor"]):
        return "duvida_pontual"
    elif any(p in pergunta for p in ["exemplo pr√°tico", "me d√° um exemplo", "passo a passo", "como fazer isso", "como fa√ßo", "me ensina", "ensinar", "me mostre como"]):
        return "exemplo_pratico"
    else:
        return "geral"

def encontrar_modulo_aula(pergunta):
    pergunta = pergunta.lower()
    m_modulo = re.search(r'\bm[o√≥]dulo\s*(\d+)\b', pergunta)
    m_aula = re.search(r'\baula\s*(\d+\.\d+)\b', pergunta)
    modulo = None
    aula = None
    if m_modulo:
        modulo = int(m_modulo.group(1))
    if m_aula:
        aula = m_aula.group(1)
    return modulo, aula

def atualizar_progresso(pergunta: str, progresso: dict) -> dict:
    if not progresso:
        return {'modulo': 1, 'aula': '1.1', 'etapa': 1, 'aguardando_duvida': False, 'visao_geral': True}

    pergunta_lower = pergunta.strip().lower()
    modulo_nav, aula_nav = encontrar_modulo_aula(pergunta)
    if modulo_nav:
        progresso['modulo'] = modulo_nav
        if aula_nav and aula_nav in AULAS_POR_MODULO.get(modulo_nav, []):
            progresso['aula'] = aula_nav
        else:
            progresso['aula'] = AULAS_POR_MODULO[modulo_nav][0]
        progresso['etapa'] = 1
        progresso['visao_geral'] = False
        progresso['aguardando_duvida'] = False
        return progresso
    elif aula_nav:
        for m, aulas in AULAS_POR_MODULO.items():
            if aula_nav in aulas:
                progresso['modulo'] = m
                progresso['aula'] = aula_nav
                progresso['etapa'] = 1
                progresso['visao_geral'] = False
                progresso['aguardando_duvida'] = False
                return progresso

    if any(p in pergunta_lower for p in ["voltar", "retornar", "anterior"]):
        modulo = progresso['modulo']
        aula_atual = progresso['aula']
        aulas = AULAS_POR_MODULO.get(modulo, [])
        idx = aulas.index(aula_atual) if aula_atual in aulas else 0
        if idx > 0:
            progresso['aula'] = aulas[idx-1]
            progresso['etapa'] = 1
        else:
            if modulo > 1:
                progresso['modulo'] = modulo - 1
                progresso['aula'] = AULAS_POR_MODULO[modulo-1][-1]
                progresso['etapa'] = 1
        progresso['visao_geral'] = False
        progresso['aguardando_duvida'] = False
        return progresso

    if "repetir" in pergunta_lower:
        progresso['etapa'] = 1
        progresso['aguardando_duvida'] = False
        progresso['visao_geral'] = False
        return progresso

    if any(p in pergunta_lower for p in ["pr√≥xima aula", "avan√ßar", "continuar", "pode avan√ßar"]):
        modulo = progresso['modulo']
        aula_atual = progresso['aula']
        aulas = AULAS_POR_MODULO.get(modulo, [])
        idx = aulas.index(aula_atual) if aula_atual in aulas else 0
        if idx < len(aulas)-1:
            progresso['aula'] = aulas[idx+1]
            progresso['etapa'] = 1
        else:
            if modulo < 7:
                progresso['modulo'] = modulo + 1
                progresso['aula'] = AULAS_POR_MODULO[modulo+1][0]
                progresso['etapa'] = 1
        progresso['visao_geral'] = False
        progresso['aguardando_duvida'] = False
        return progresso

    if pergunta_lower in ["sim", "sim desejo", "quero sim", "vamos", "ok"]:
        if progresso.get('visao_geral', False):
            progresso['visao_geral'] = False
            progresso['modulo'] = 1
            progresso['aula'] = '1.1'
            progresso['etapa'] = 1
        elif progresso.get('etapa', 1) < 3:
            progresso['etapa'] += 1
        else:
            progresso['aguardando_duvida'] = True
    elif pergunta_lower in ["n√£o", "nao", "n√£o tenho d√∫vida", "nao tenho duvida"]:
        if progresso.get('aguardando_duvida'):
            progresso['aguardando_duvida'] = False
            modulo = progresso['modulo']
            aula_atual = progresso['aula']
            aulas = AULAS_POR_MODULO.get(modulo, [])
            idx = aulas.index(aula_atual) if aula_atual in aulas else 0
            if idx < len(aulas)-1:
                progresso['aula'] = aulas[idx+1]
            else:
                if modulo < 7:
                    progresso['modulo'] = modulo + 1
                    progresso['aula'] = AULAS_POR_MODULO[modulo+1][0]
            progresso['etapa'] = 1
            progresso['visao_geral'] = False
    return progresso

# BLOCO DE M√ìDULOS E AULAS
BLOCO_MODULOS = """
m√≥dulo 01 ‚Äì mentalidade high ticket: como desenvolver uma mente preparada para atrair pacientes high ticket
1.1. introdu√ß√£o ‚Äì a mentalidade do especialista high ticket: o primeiro passo para dobrar o faturamento do consult√≥rio
1.2. como quebrar bloqueios com dinheiro e valorizar seu trabalho no consult√≥rio high ticket
1.3. como desenvolver autoconfian√ßa profissional e se tornar autoridade no consult√≥rio high ticket
1.4. concorr√™ncia: como se diferenciar e construir valoriza√ß√£o profissional
1.5. boas pr√°ticas no atendimento: o caminho mais r√°pido para o consult√≥rio high ticket

m√≥dulo 02 ‚Äì senso est√©tico high ticket: como transformar sua imagem e ambiente para atrair pacientes que valorizam
2.1. o senso est√©tico high ticket
2.2. mulheres: senso est√©tico high ticket x cafona
2.3. homens no consult√≥rio high ticket: senso est√©tico, imagem e escolhas que atraem ou afastam pacientes
2.4. senso est√©tico high ticket na decora√ß√£o: o que priorizar e o que evitar no consult√≥rio
2.5. papelaria e brindes
2.6. como fazer o paciente se sentir especial e gerar mais valor na percep√ß√£o dele
2.7. checklist: o que voc√™ precisa mudar hoje no seu consult√≥rio para dobrar o faturamento com o senso est√©tico
2.8. como tornar a primeira impress√£o do paciente inesquec√≠vel
2.9. o que √© cafona no consult√≥rio e afasta paciente high ticket

m√≥dulo 03 ‚Äì posicionamento presencial high ticket: como construir autoridade sem redes sociais
3.1. posicionamento presencial high ticket: estrat√©gias para construir autoridade e valor no consult√≥rio
3.2. voc√™ √© um cnpj: riscos, prote√ß√£o jur√≠dica e postura profissional no consult√≥rio high ticket
3.3. como causar uma boa primeira impress√£o no consult√≥rio high ticket
3.4. como causar uma boa impress√£o pessoal no consult√≥rio high ticket: educa√ß√£o, pontualidade e respeito
3.5. posicionamento em eventos sociais e exposi√ß√£o na m√≠dia: comportamento e limites para fortalecer sua autoridade e atrair pacientes high ticket

m√≥dulo 04 ‚Äì a jornada do paciente high ticket: como transformar atendimento em encantamento e fideliza√ß√£o
4.1. a jornada do paciente high ticket: conceito e regras de ouro para o consult√≥rio
4.2. o que o paciente nunca te falar√°: detalhes essenciais para encantar pacientes high ticket
4.3. secret√°ria e assistente virtual high ticket: fun√ß√µes, riscos e boas pr√°ticas para consult√≥rios lucrativos
4.4. o primeiro contato: como organizar e profissionalizar a marca√ß√£o de consultas desde o in√≠cio
4.5. marca√ß√£o de consulta high ticket: como organizar hor√°rios, valor e scripts para reduzir faltas e valorizar seu atendimento

m√≥dulo 05 ‚Äì estrat√©gias de capta√ß√£o e fideliza√ß√£o: como atrair pacientes high ticket sem tr√°fego ou redes sociais
5.1. passo a passo completo para atrair e reter pacientes high ticket com o m√©todo consult√≥rio high ticket
5.2. o impacto do lifetime value do paciente high ticket no crescimento do consult√≥rio
5.3. como nichar o consult√≥rio para atrair pacientes high ticket
5.4. estrat√©gias pr√°ticas de networking para atra√ß√£o de pacientes high ticket
5.5. estrat√©gias para atrair pacientes high ticket ao come√ßar do absoluto zero

m√≥dulo 06 ‚Äì estrat√©gias de vendas high ticket: como apresentar e fechar tratamentos de alto valor com √©tica
6.1. os passos fundamentais para dobrar o faturamento do consult√≥rio com vendas high ticket
6.2. como migrar dos conv√™nios para o atendimento particular de forma segura e organizada
6.3. como aumentar o valor da sua consulta de forma estrat√©gica e segura
6.4. como e quando dar descontos para pacientes high ticket: estrat√©gia √©tica e eficaz
6.5. t√©cnica alanis ‚Äì como usar apresenta√ß√£o visual para vencer obje√ß√µes e fechar tratamentos high ticket

m√≥dulo 07 ‚Äì estrat√©gias por especialidade
7.1. sa√∫de das crian√ßas ‚Äì estrat√©gias para consult√≥rios pedi√°tricos high ticket
7.2. sa√∫de feminina ‚Äì estrat√©gias high ticket para ginecologia, obstetr√≠cia e sa√∫de da mulher
7.3. sa√∫de do idoso ‚Äì estrat√©gias high ticket para geriatria e aten√ß√£o ao idoso
7.4. cirurgi√µes ‚Äì como apresentar valor, or√ßamento e experi√™ncia high ticket
7.5. doen√ßas s√©rias ‚Äì como conduzir pacientes em situa√ß√µes cr√≠ticas no consult√≥rio high ticket
7.6. profissionais com atendimento misto ‚Äì estrat√©gias para consult√≥rios com diferentes p√∫blicos
7.7. profissionais com baixa rotatividade ‚Äì estrat√©gias para retorno e fideliza√ß√£o
7.8. profissionais da est√©tica ‚Äì estrat√©gias para consult√≥rios est√©ticos e de autocuidado
7.9. nutricionistas ‚Äì estrat√©gias high ticket para emagrecimento, nutrologia e endocrinologia
"""

def generate_answer(question, context="", history=None, tipo_de_prompt=None, is_first_question=True):
    if history and isinstance(history, list) and len(history) > 0:
        ultimo_item = history[-1]
        progresso = ultimo_item.get('progresso', None)
        if not progresso:
            progresso = {'modulo': 1, 'aula': '1.1', 'etapa': 1, 'aguardando_duvida': False, 'visao_geral': True}
    else:
        progresso = {'modulo': 1, 'aula': '1.1', 'etapa': 1, 'aguardando_duvida': False, 'visao_geral': True}

    progresso = atualizar_progresso(question, progresso)
    modulo = progresso.get('modulo', 1)
    aula = progresso.get('aula', '1.1')
    etapa = progresso.get('etapa', 1)
    aguardando_duvida = progresso.get('aguardando_duvida', False)
    visao_geral = progresso.get('visao_geral', False)

    saudacao = random.choice(GREETINGS) if is_first_question else ""
    fechamento = random.choice(CLOSINGS)
    cenario = detectar_cenario(question)

    # VIS√ÉO GERAL
    if visao_geral:
        explicacao = (
            f"{saudacao}<br><br>"
            "O curso Consult√≥rio High Ticket √© composto por 7 m√≥dulos, cada um trazendo compet√™ncias-chave para o crescimento do seu consult√≥rio e sua carreira como Doutor(a).<br><br>"
            "<b>Confira os m√≥dulos:</b><br>"
            "<b>M√≥dulo 01 ‚Äì mentalidade high ticket: como desenvolver uma mente preparada para atrair pacientes high ticket</b><br>"
            "<b>M√≥dulo 02 ‚Äì senso est√©tico high ticket: como transformar sua imagem e ambiente para atrair pacientes que valorizam</b><br>"
            "<b>M√≥dulo 03 ‚Äì posicionamento presencial high ticket: como construir autoridade sem redes sociais</b><br>"
            "<b>M√≥dulo 04 ‚Äì a jornada do paciente high ticket: como transformar atendimento em encantamento e fideliza√ß√£o</b><br>"
            "<b>M√≥dulo 05 ‚Äì estrat√©gias de capta√ß√£o e fideliza√ß√£o: como atrair pacientes high ticket sem tr√°fego ou redes sociais</b><br>"
            "<b>M√≥dulo 06 ‚Äì estrat√©gias de vendas high ticket: como apresentar e fechar tratamentos de alto valor com √©tica</b><br>"
            "<b>M√≥dulo 07 ‚Äì estrat√©gias por especialidade</b><br><br>"
            "Para come√ßar, basta dizer o n√∫mero do m√≥dulo e da aula que deseja (ex: 'm√≥dulo 2, aula 2.3') ou responda 'sim' para come√ßar do in√≠cio."
        )
        quick_replies = gerar_quick_replies(question, explicacao, history, progresso)
        return explicacao, quick_replies, progresso

    if aguardando_duvida:
        explicacao = (
            "Antes de concluir esta aula, Doutor(a), ficou alguma d√∫vida sobre o conte√∫do apresentado? "
            "Se quiser aprofundar algum ponto, √© s√≥ pedir. Se estiver tudo claro, responda 'n√£o' para avan√ßarmos para a pr√≥xima aula, ou escolha outra aula/m√≥dulo."
        )
        quick_replies = gerar_quick_replies(question, explicacao, history, progresso)
        return explicacao, quick_replies, progresso

    if cenario == "exemplo_pratico":
        instruction = (
            f"Sempre explique de forma did√°tica, detalhada e com passo a passo pr√°tico, como uma professora que ENSINA de verdade, usando o conte√∫do real do curso abaixo. "
            f"Baseie sua resposta na aula {aula} do m√≥dulo {modulo}. Extraia do bloco abaixo todos os m√©todos, protocolos, scripts e exemplos relevantes. Mostre COMO FAZER na pr√°tica, para que o Doutor(a) aplique no consult√≥rio."
        )
    elif cenario == "duvida_pontual":
        instruction = f"Responda de forma objetiva e detalhada a d√∫vida espec√≠fica, usando SEMPRE o t√≠tulo da aula exatamente como est√° no bloco oficial."
    else:
        if etapa == 1:
            instruction = (
                f"Voc√™ est√° iniciando a aula {aula} do m√≥dulo {modulo}.<br>"
                "O objetivo desta aula √© apresentar a voc√™, Doutor(a), conceitos essenciais e estrat√©gias pr√°ticas para transformar seu consult√≥rio.<br>"
                "Deseja come√ßar agora mesmo? Responda 'sim' para avan√ßar, ou me pergunte se quiser aprofundar ou tirar alguma d√∫vida antes de prosseguir."
            )
        elif etapa == 2:
            instruction = f"Voc√™ est√° na parte intermedi√°ria da aula {aula} do m√≥dulo {modulo}. Aprofunde o conte√∫do com exemplos pr√°ticos, aplica√ß√µes cl√≠nicas e orienta√ß√µes detalhadas para Doutor(a), e use sempre o t√≠tulo da aula exatamente como est√° no bloco oficial. Se o usu√°rio mencionar especialidade (ex: sou pediatra), adapte os exemplos."
        else:
            instruction = (
                f"Voc√™ est√° concluindo a aula {aula} do m√≥dulo {modulo}. Recapitule os principais aprendizados de forma sucinta. "
                "Pergunte se ficou alguma d√∫vida, ou se o Doutor(a) quer uma explica√ß√£o extra, voltar, pular ou escolher outro m√≥dulo antes de considerar a aula conclu√≠da."
            )
            progresso['aguardando_duvida'] = True

    prompt = f"""{instruction}

Voc√™ √© a professora Nanda Mac.ia, uma intelig√™ncia artificial altamente did√°tica, criada especificamente para ensinar e tirar d√∫vidas de Doutores(as) que estudam o Curso Online Consult√≥rio High Ticket, ministrado por Nanda Mac Dowell.

Leia atentamente o hist√≥rico da conversa antes de responder, compreendendo o contexto exato da intera√ß√£o atual para garantir precis√£o na sua resposta.

IMPORTANTE: Sempre cite o nome do m√≥dulo e t√≠tulo da aula exatamente como est√° na estrutura abaixo. N√£o adapte, n√£o resuma, n√£o traduza.

ESTRUTURA COMPLETA DO CURSO ‚Äì M√ìDULOS E AULAS:

{BLOCO_MODULOS}

Hist√≥rico da conversa anterior:
{history}

Pergunta atual do Doutor(a):
'{question}'

Utilize o conte√∫do adicional abaixo, se relevante:
{context}
    """

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Responda SEMPRE em portugu√™s do Brasil."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.4,
            max_tokens=900
        )
        explicacao = response.choices[0].message.content.strip()
        quick_replies = gerar_quick_replies(question, explicacao, history, progresso)
    except OpenAIError:
        explicacao = OUT_OF_SCOPE_MSG
        quick_replies = []
        return explicacao, quick_replies, progresso
    except Exception:
        explicacao = OUT_OF_SCOPE_MSG
        quick_replies = []
        return explicacao, quick_replies, progresso

    if saudacao:
        resposta = f"{saudacao}<br><br>{explicacao}<br><br>{fechamento}"
    else:
        resposta = f"{explicacao}<br><br>{fechamento}"

    return resposta, quick_replies, progresso
