import os
import re
import unicodedata
import random
from openai import OpenAI, OpenAIError
from pypdf import PdfReader

# -----------------------------
# CONFIGURA√á√ÉO DE AMBIENTE
# -----------------------------
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise ValueError("‚ùå Vari√°vel de ambiente OPENAI_API_KEY n√£o encontrada.")
client = OpenAI(api_key=api_key)

# -----------------------------
# VARIA√á√ïES DE SAUDA√á√ÉO E ENCERRAMENTO
# -----------------------------
GREETINGS = [
    "Que √≥tima d√∫vida! üòä",
    "Ol√°, excelente pergunta! üåü",
    "Adorei sua pergunta! ü§ó",
    "√ìtima coloca√ß√£o! ‚ú®",
    "Que bom que veio perguntar isso! üí¨"
]

CLOSINGS = [
    "Qualquer outra d√∫vida, estou por aqui! üíú",
    "Fico √† disposi√ß√£o para ajudar no que precisar! üå∑",
    "Conte sempre comigo ‚Äî sucesso nos seus atendimentos! ‚ú®",
    "Espero que tenha ajudado. At√© a pr√≥xima! ü§ç",
    "Estou aqui para o que voc√™ precisar. Um abra√ßo! ü§ó"
]

# -----------------------------
# CONSTANTES DE MENSAGENS
# -----------------------------
SYSTEM_PROMPT = (
    "Voc√™ √© Nanda Mac.ia, professora virtual experiente no curso Consult√≥rio High Ticket. "
    "Use linguagem acolhedora e did√°tica: inicie com uma sauda√ß√£o variada, explique passo a passo "
    "e finalize com um encerramento acolhedor. Todas as respostas devem ser em portugu√™s e baseadas nas transcri√ß√µes do curso."
)

OUT_OF_SCOPE_MSG = (
    "Parece que sua pergunta ainda n√£o est√° contemplada nas aulas do curso Consult√≥rio High Ticket. "
    "Mas n√£o se preocupe: nosso conte√∫do est√° sempre em expans√£o! üòä<br><br>"
    "Que tal explorar t√≥picos relacionados, como 'Health Plan', 'Patient Letter' ou 'Plano de A√ß√£o'? "
    "Voc√™ pode reformular sua d√∫vida com base nesses temas ou perguntar sobre qualquer m√≥dulo ou atividade, "
    "e eu ficarei feliz em ajudar com o que estiver ao meu alcance."
)

# -----------------------------
# NORMALIZA√á√ÉO DE CHAVE
# -----------------------------

def normalize_key(text: str) -> str:
    nfkd = unicodedata.normalize("NFD", text)
    ascii_only = "".join(ch for ch in nfkd if unicodedata.category(ch) != "Mn")
    s = ascii_only.lower()
    s = re.sub(r"[^\w\s]", "", s)
    return re.sub(r"\s+", " ", s).strip()

# -----------------------------
# LEITURA DE TRANSCRI√á√ïES
# -----------------------------
BASE_DIR = os.path.dirname(__file__)
try:
    _raw_txt = open(os.path.join(BASE_DIR, "transcricoes.txt"), encoding="utf-8").read()
except FileNotFoundError:
    _raw_txt = ""

# -----------------------------
# FUN√á√ÉO DE BUSCA POR TRECHOS
# -----------------------------

def search_transcripts(question: str, max_sentences: int = 3) -> str:
    """
    Recupera at√© max_sentences senten√ßas mais relevantes de transcricoes.txt, 
    ordenadas pelo n√∫mero de palavras-chave da pergunta presentes.
    """
    if not _raw_txt:
        return ""
    # Extrair palavras-chave significativas
    key = normalize_key(question)
    keywords = [w for w in key.split() if len(w) > 3]
    if not keywords:
        return ""
    # Dividir em senten√ßas
    sentences = re.split(r'(?<=[\.\!\?])\s+', _raw_txt)
    scored = []
    # Pontuar cada senten√ßa
    for sent in sentences:
        norm = normalize_key(sent)
        score = sum(1 for w in keywords if w in norm)
        if score > 0:
            scored.append((score, sent.strip()))
    # Ordenar por pontua√ß√£o decrescente
    scored.sort(key=lambda x: x[0], reverse=True)
    # Selecionar top
    top = [s for _, s in scored[:max_sentences]]
    return "<br>".join(top)

# -----------------------------
# DICION√ÅRIO CAN√îNICO
# -----------------------------
CANONICAL_QA = {
    "como informar uma atualizacao de valor de consulta sem perder credibilidade":
        "No momento de reagendar, siga estes passos:<br>"
        "1. Reforce o hist√≥rico de resultados: ‚ÄúDesde que come√ßamos, voc√™ j√° melhorou X%‚Ä¶‚Äù<br>"
        "2. Explique o aumento como investimento em atualiza√ß√µes e tecnologia.<br>"
        "3. Ofere√ßa op√ß√µes de pagamento: parcelamento ou condi√ß√µes especiais por tempo limitado.<br><br>"
        "Exemplo: ‚ÄúNossa consulta agora √© R$ 350, pois inclu√≠ novas t√©cnicas de avalia√ß√£o‚Ä¶ Prefere Pix, cart√£o ou parcelamento em at√© 3x?‚Äù",
    "como devo decorar meu consultorio e me vestir para nao afastar o paciente high ticket":
        "Decora√ß√£o: espa√ßos clean, m√≥veis de linhas retas, cores neutras (branco, bege, cinza).<br>"
        "Perfume: fragr√¢ncias leves e universais (ex.: Jo Malone ‚ÄúLime Basil & Mandarin‚Äù ou Giovanna Baby).<br>"
        "Uniforme: jaleco branco cl√°ssico sem detalhes, camisa social clara e cal√ßa de corte tradicional (sapato social ou scarpin neutro).",
    # Outras entradas can√¥nicas...
}
CANONICAL_QA_NORMALIZED = {normalize_key(k): v for k, v in CANONICAL_QA.items()}

# -----------------------------
# GERA√á√ÉO DE RESPOSTA
# -----------------------------

def generate_answer(question: str, context: str = "", history: list = None, tipo_de_prompt: str = None) -> str:
    saudacao = random.choice(GREETINGS)
    fechamento = random.choice(CLOSINGS)
    key = normalize_key(question)

    # 1) Resposta can√¥nica
    for canon, resp in CANONICAL_QA_NORMALIZED.items():
        if canon in key:
            return f"{saudacao}<br><br>{resp}<br><br>{fechamento}"

    # 2) Fallback por busca nas transcri√ß√µes
    snippet = search_transcripts(question)
    if snippet:
        # Reescrever de forma did√°tica
        prompt = (
            f"Voc√™ √© Nanda Mac.ia, professora did√°tica. Reescreva o seguinte trecho do curso em suas pr√≥prias palavras, "
            f"explicando passo a passo, adicionando exemplos pr√°ticos e perguntando se faz sentido para o aluno.\n\n"  
            f"Trecho:\n{snippet}"
        )
        try:
            r = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": SYSTEM_PROMPT},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=500
            )
        except OpenAIError:
            r = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": SYSTEM_PROMPT},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=500
            )
        content = r.choices[0].message.content.strip()
        return f"{saudacao}<br><br>{content}<br><br>{fechamento}"

    # 3) Fora de escopo
    return f"{saudacao}<br><br>{OUT_OF_SCOPE_MSG}<br><br>{fechamento}"
