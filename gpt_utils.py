import os
import re
import random
from openai import OpenAI, OpenAIError

TRANSCRIPTS_PATH = os.path.join(os.path.dirname(__file__), "transcricoes.txt")
client = OpenAI()

OUT_OF_SCOPE_MSG = (
    "Desculpe, ainda n√£o tenho informa√ß√µes suficientes sobre esse tema espec√≠fico do curso. "
    "Por favor, envie outra pergunta ou consulte o material da aula."
)

GREETINGS = [
    "Ol√°, Doutor(a), seja muito bem-vindo(a)!",
    "Oi, Doutor(a), tudo bem? Como posso ajudar?",
    "Bem-vindo(a) de volta, Doutor(a)!",
    "Ol√°, Doutor(a)! Estou aqui para apoiar voc√™ no seu crescimento"
]

CLOSINGS = [
    "Se quiser um exemplo pr√°tico ou modelo, clique nos bot√µes abaixo.",
    "Tem outro desafio no seu consult√≥rio? Me conte ou clique em Novo Tema.",
    "Se quiser aprofundar, escolha uma op√ß√£o r√°pida ou pergunte de novo!",
    "Quer mudar de assunto? S√≥ digitar ‚Äònovo tema‚Äô.",
    "Essa resposta te ajudou? Clique em üëç ou üëé."
]

def gerar_quick_replies(question, explicacao, history=None):
    return [
        "Quero um exemplo pr√°tico",
        "Me explique passo a passo",
        "Tenho uma d√∫vida sobre esse tema"
    ]

def resposta_link(titulo, url, icone="üìÑ"):
    return f"<br><a class='chip' href='{url}' target='_blank'>{icone} {titulo}</a>"

def resposta_link_externo(titulo, url, icone="üîó"):
    return f"<br><a class='chip' href='{url}' target='_blank'>{icone} {titulo}</a>"

def detectar_cenario(pergunta: str) -> str:
    pergunta = pergunta.lower()
    if any(p in pergunta for p in ["quero fazer o curso completo", "come√ßar do in√≠cio", "me ensina tudo", "fazer o curso com voc√™"]):
        return "curso_completo"
    elif any(p in pergunta for p in ["quero come√ßar pelo m√≥dulo", "me mostra o m√≥dulo", "ver o m√≥dulo", "come√ßar m√≥dulo"]):
        return "modulo_especifico"
    elif any(p in pergunta for p in ["assisti", "j√° vi a aula", "tenho uma d√∫vida", "n√£o entendi", "poderia explicar melhor"]):
        return "duvida_pontual"
    elif any(p in pergunta for p in ["exemplo pr√°tico", "me d√° um exemplo", "passo a passo", "como fazer isso"]):
        return "exemplo_pratico"
    else:
        return "geral"

def atualizar_progresso(pergunta: str, progresso: dict) -> dict:
    if not progresso:
        return {'modulo': 1, 'aula': '1.1', 'etapa': 1}
    if pergunta.lower().strip() in ["sim", "sim desejo", "quero sim", "vamos", "ok"]:
        if progresso['etapa'] == 1:
            progresso['etapa'] = 2
        elif progresso['etapa'] == 2:
            progresso['etapa'] = 3
        else:
            modulo = progresso['modulo']
            num_atual = float(progresso['aula'])
            num_proxima = round(num_atual + 0.1, 1)
            progresso['aula'] = f"{modulo}.{int(num_proxima * 10) % 10}"
            progresso['etapa'] = 1
    return progresso

def generate_answer(question, context="", history=None, tipo_de_prompt=None, is_first_question=True):
    # RECUPERA PROGRESSO DO HIST√ìRICO
    if history and isinstance(history, list) and len(history) > 0:
        ultimo_item = history[-1]
        progresso = ultimo_item.get('progresso', None)
        if not progresso:
            progresso = {'modulo': 1, 'aula': '1.1', 'etapa': 1}
    else:
        progresso = {'modulo': 1, 'aula': '1.1', 'etapa': 1}

    progresso = atualizar_progresso(question, progresso)
    modulo = progresso.get('modulo', 1)
    aula = progresso.get('aula', '1.1')
    etapa = progresso.get('etapa', 1)

    saudacao = random.choice(GREETINGS) if is_first_question else ""
    fechamento = random.choice(CLOSINGS)

    cenario = detectar_cenario(question)

    # *** MELHORIA: resposta did√°tica para pedido de curso completo ***
    if cenario == "curso_completo":
        explicacao = (
            f"{saudacao}<br><br>"
            "√ìtima decis√£o, doutor(a)! O curso Consult√≥rio High Ticket √© composto por 7 m√≥dulos completos e progressivos. "
            "Voc√™ vai aprender desde a mentalidade e posicionamento high ticket, passando pela experi√™ncia do paciente, estrat√©gias de fideliza√ß√£o e vendas, at√© t√©cnicas espec√≠ficas para cada especialidade.<br><br>"
            "Podemos avan√ßar juntos, m√≥dulo por m√≥dulo, come√ßando agora pelo M√≥dulo 01 ‚Äì Mentalidade High Ticket, ou voc√™ pode pedir para ir direto ao m√≥dulo que desejar.<br><br>"
            "Deseja iniciar imediatamente a primeira aula do M√≥dulo 01?<br>"
            "Se quiser ver a lista detalhada de todos os m√≥dulos e aulas, √© s√≥ pedir: <b>‚ÄúQuero ver todos os m√≥dulos‚Äù</b>.<br><br>"
            f"{fechamento}"
        )
        quick_replies = gerar_quick_replies(question, explicacao, history)
        return explicacao, quick_replies, progresso

    if cenario == "modulo_especifico":
        # L√≥gica de apresenta√ß√£o did√°tica do m√≥dulo, n√£o s√≥ do √≠ndice.
        explicacao = (
            f"{saudacao}<br><br>"
            "√ìtima escolha! Me diga qual m√≥dulo deseja come√ßar, ou escreva o n√∫mero do m√≥dulo e eu apresento uma vis√£o clara das aulas e objetivos dele para voc√™.<br>"
            "Por exemplo: 'Quero come√ßar pelo m√≥dulo 06' ou 'Me mostre o m√≥dulo de vendas'.<br><br>"
            f"{fechamento}"
        )
        quick_replies = gerar_quick_replies(question, explicacao, history)
        return explicacao, quick_replies, progresso

    # Demais cen√°rios (inclui o fluxo original completo!)
    if etapa == 1:
        instruction = f"Voc√™ est√° iniciando a aula {aula} do m√≥dulo {modulo}. Apresente o objetivo da aula, como uma introdu√ß√£o did√°tica clara e bem estruturada. Explique por que o conte√∫do √© importante para o m√©dico e qual ser√° o impacto na pr√°tica cl√≠nica."
    elif etapa == 2:
        instruction = f"Voc√™ est√° na parte intermedi√°ria da aula {aula} do m√≥dulo {modulo}. Aprofunde o conte√∫do com exemplos pr√°ticos, aplica√ß√µes cl√≠nicas e orienta√ß√µes detalhadas para m√©dicos. Use linguagem objetiva e densa."
    else:
        instruction = f"Voc√™ est√° encerrando a aula {aula} do m√≥dulo {modulo}. Recapitule os principais aprendizados e prepare o aluno para a pr√≥xima aula. Pergunte se ele deseja seguir para a aula seguinte."

    prompt = f"""{instruction}

Voc√™ √© a professora Nanda Mac.ia, uma intelig√™ncia artificial altamente did√°tica, criada especificamente para ensinar e tirar d√∫vidas de m√©dicos que estudam o Curso Online Consult√≥rio High Ticket, ministrado por Nanda Mac Dowell.

Leia atentamente o hist√≥rico da conversa antes de responder, compreendendo o contexto exato da intera√ß√£o atual para garantir precis√£o na sua resposta.

ESTRUTURA COMPLETA DO CURSO ‚Äì M√ìDULOS E AULAS:

[SEU BLOCO DE M√ìDULOS INTEIRO, COMO J√Å EST√Å]

Hist√≥rico da conversa anterior:
{history}

Pergunta atual do aluno:
'{question}'

Utilize o conte√∫do adicional abaixo, se relevante:
{context}
    """

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Responda SEMPRE em portugu√™s do Brasil."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.4,
            max_tokens=700
        )
    except OpenAIError:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Responda SEMPRE em portugu√™s do Brasil."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.4,
            max_tokens=700
        )

    explicacao = response.choices[0].message.content.strip()
    quick_replies = gerar_quick_replies(question, explicacao, history)

    if saudacao:
        resposta = f"{saudacao}<br><br>{explicacao}<br><br>{fechamento}"
    else:
        resposta = f"{explicacao}<br><br>{fechamento}"

    return resposta, quick_replies, progresso
