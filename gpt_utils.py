import os
import json
import unicodedata
import re
from openai import OpenAI, OpenAIError
from pypdf import PdfReader

# -----------------------------
# CONFIGURA√á√ÉO DE AMBIENTE
# -----------------------------
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise ValueError("‚ùå Vari√°vel de ambiente OPENAI_API_KEY n√£o encontrada.")
client = OpenAI(api_key=api_key)

# -----------------------------
# MENSAGEM PADR√ÉO PARA FORA DE ESCOPO
# -----------------------------
OUT_OF_SCOPE_MSG = (
    "Essa pergunta √© muito boa, mas no momento ela est√° <strong>fora do conte√∫do abordado nas aulas do curso "
    "Consult√≥rio High Ticket</strong>. Isso pode indicar uma oportunidade de melhoria do nosso material! üòä<br><br>"
    "Vamos sinalizar esse tema para a equipe pedag√≥gica avaliar a inclus√£o em vers√µes futuras do curso. "
    "Enquanto isso, recomendamos focar nos ensinamentos j√° dispon√≠veis para ter os melhores resultados poss√≠veis no consult√≥rio."
)

# -----------------------------
# FUN√á√ÉO DE NORMALIZA√á√ÉO
# -----------------------------
def normalize(text: str) -> str:
    # 1) decompor acentos
    txt = unicodedata.normalize('NFD', text)
    # 2) remover marcas
    txt = ''.join(ch for ch in txt if unicodedata.category(ch) != 'Mn')
    # 3) tudo em min√∫sculo
    txt = txt.lower()
    # 4) remover pontua√ß√£o e caracteres especiais
    txt = re.sub(r'[^a-z0-9\s]', '', txt)
    # 5) normalizar espa√ßos
    return re.sub(r'\s+', ' ', txt).strip()

# -----------------------------
# CARREGA TRANSCRI√á√ïES E PDFs
# -----------------------------
BASE_DIR = os.path.dirname(__file__)

_raw_txt = open(os.path.join(BASE_DIR, "transcricoes.txt"), encoding="utf-8").read()

_raw_pdf1 = ""
try:
    reader1 = PdfReader(os.path.join(BASE_DIR, "PlanodeAcaoConsultorioHighTicket-1Semana (4)[1].pdf"))
    _raw_pdf1 = "\n\n".join(page.extract_text() or "" for page in reader1.pages)
except:
    pass

_raw_pdf2 = ""
try:
    reader2 = PdfReader(os.path.join(BASE_DIR, "GuiadoCursoConsultorioHighTicket.-CHT21[1].pdf"))
    _raw_pdf2 = "\n\n".join(page.extract_text() or "" for page in reader2.pages)
except:
    pass

_combined = _raw_txt + "\n\n" + _raw_pdf1 + "\n\n" + _raw_pdf2
try:
    resp = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {
                "role": "system",
                "content": (
                    "Voc√™ √© um resumidor especialista em educa√ß√£o. "
                    "Resuma em at√© 300 palavras todo o conte√∫do do curso ‚ÄúConsult√≥rio High Ticket‚Äù, "
                    "incluindo o plano de a√ß√£o da primeira semana e o Guia do Curso, "
                    "para servir de base na classifica√ß√£o de escopo e tipo de prompt."
                )
            },
            {"role": "user", "content": _combined}
        ]
    )
    COURSE_SUMMARY = resp.choices[0].message.content
except OpenAIError:
    COURSE_SUMMARY = ""

# -----------------------------
# MAPA DE KEYWORDS PARA CLASSIFICA√á√ÉO
# -----------------------------
TYPE_KEYWORDS = {
    "revisao":                        ["revis√£o", "revisao", "revise", "resumir"],
    "precificacao":                   ["precifica√ß√£o", "precificacao", "precificar", "pre√ßo", "valor", "faturamento"],
    "health_plan":                    ["health plan", "valor do health plan", "retorno do investimento"],
    "capitacao_sem_marketing_digital":["offline", "sem usar instagram", "sem instagram", "sem an√∫ncios", "sem anuncios"],
    "aplicacao":                      ["como aplico", "aplica√ß√£o", "aplico", "roteiro", "aplica√ß√£o"],
    "faq":                            ["quais", "d√∫vidas", "duvidas", "pergunta frequente"],
    "explicacao":                     ["explique", "o que √©", "defina", "conceito"],
    "plano_de_acao":                  ["plano de a√ß√£o", "primeira semana", "1¬™ semana"],
    "guia":                           ["guia do curso", "passo a passo", "cht21"]
}

# -----------------------------
# RESPOSTAS CAN√îNICAS (Guia + Plano de A√ß√£o)
# -----------------------------
CANONICAL_QA = {
    # ‚Äî Guia do Curso ‚Äî
    "oi nanda acabei de me inscrever no curso qual e o primeiro passo que devo dar assim que entrar": (
        "1. <strong>Passo 1:</strong> Assista √† aula de Onboarding completo.<br>"
        "2. <strong>Passo 2:</strong> Entre no grupo exclusivo de avisos da turma.<br>"
        "3. <strong>Passo 3:</strong> Acesse a √Årea de Membros e preencha seu perfil.<br>"
        "4. <strong>Passo 4:</strong> Participe do Desafio Health Plan clicando em ‚ÄúParticipar‚Äù."
    ),
    "depois de entrar na area de membros como eu me inscrevo no desafio health plan": (
        "1. <strong>Clique em ‚ÄúParticipar‚Äù</strong> no m√≥dulo Desafio Health Plan.<br>"
        "2. <strong>Fechar</strong> a janela inicial.<br>"
        "3. Na pr√≥xima tela, <strong>clique novamente em ‚ÄúParticipar‚Äù</strong> para efetivar a inscri√ß√£o.<br>"
        "4. Clique em <strong>Fechar</strong> para concluir."
    ),
    "voce pode explicar como o desafio health plan esta organizado em fases": (
        "O Desafio Health Plan √© dividido em tr√™s fases, **sem datas fixas**:\n"
        "- **Fase 1 ‚Äì Miss√£o inicial:** assistir m√≥dulos 1‚Äì6 e preencher o quiz.\n"
        "- **Fase 2 ‚Äì Masterclass & Envio:** participar da Masterclass e enviar seu primeiro plano.\n"
        "- **Fase 3 ‚Äì Acompanhamento:** realizar envios semanais de planners e concluir as atividades."
    ),
    "caso o participante enfrente uma situacao critica qual procedimento deve ser adotado para solicitar suporte": (
        "Em caso de situa√ß√£o cr√≠tica, envie um e-mail para <strong>ajuda@nandamac.com</strong> "
        "com o assunto <strong>S.O.S Crise</strong>. A equipe retornar√° em at√© 24 horas."
    ),
    "onde e como o participante deve tirar duvidas sobre o metodo do curso": (
        "Poste suas d√∫vidas exclusivamente na <strong>Comunidade</strong> da √Årea de Membros. "
        "N√£o use Direct, WhatsApp ou outros canais."
    ),
    # ‚Äî Plano de A√ß√£o (1¬™ Semana) ‚Äî
    "no exercicio de bloqueios com dinheiro como escolho qual bloqueio priorizar e defino a atitude dia do chega": (
        "Dos bloqueios identificados, escolha aquele que mais gera culpa (‚ÄúS√≠ndrome do Sacerdote‚Äù) como priorit√°rio. "
        "Em ‚ÄúOnde quero chegar‚Äù, defina uma atitude concreta para o Dia do Chega, ex.: ‚ÄúA partir de hoje, afirmarei meu valor em cada consulta.‚Äù"
    ),
    "na parte de autoconfianca profissional o que devo escrever como atitude para nao deixar mais certas situacoes me abalar": (
        "Liste duas experi√™ncias que abalaram sua confian√ßa. Em ‚ÄúOnde quero chegar‚Äù, defina uma atitude transformadora, ex.: "
        "‚ÄúSempre que receber uma cr√≠tica, realizarei uma sess√£o de feedback construtivo com um colega.‚Äù"
    ),
    "como uso a atividade de nicho de atuacao para encontrar meu posicionamento e listar as acoes": (
        "Descreva seu posicionamento atual (for√ßas e lacunas) e defina seu nicho ideal. "
        "Liste a√ß√µes espec√≠ficas com prazo, ex.: ‚ÄúEspecializar em [X] em 3 meses.‚Äù"
    ),
    "no valor da consulta e procedimentos como encontro referencias de mercado e defino meus valores atuais e ideais": (
        "Anote seus pre√ßos atuais, pesquise m√©dias de mercado via associa√ß√µes ou colegas e defina valores ideais, "
        "justificando seu diferencial, ex.: ‚ÄúR$ 300 por sess√£o de fisioterapia cl√≠nica.‚Äù"
    ),
    "ainda nao tenho pacientes particulares qual estrategia de atracao de pacientes high ticket devo priorizar e como executar na agenda": (
        "Reserve um bloco fixo na agenda (ex.: toda segunda 8h‚Äì10h) para enviar 5 mensagens personalizadas ao seu nicho "
        "usando o script do curso. Depois, implemente a Patient Letter com convites impressos para potenciais pacientes HT."
    )
}

# -----------------------------
# CLASSIFICADOR DE ESCOPO + TIPO
# -----------------------------
def classify_prompt(question: str) -> dict:
    lower = normalize(question)
    # for√ßa plano_de_acao para exerc√≠cios
    if "bloqueios com dinheiro" in lower or "nicho de atuacao" in lower:
        return {"scope": "IN_SCOPE", "type": "plano_de_acao"}
    for tipo, kws in TYPE_KEYWORDS.items():
        if any(normalize(k) in lower for k in kws):
            return {"scope": "IN_SCOPE", "type": tipo}
    return {"scope": "OUT_OF_SCOPE", "type": "explicacao"}

# -----------------------------
# IDENTIDADE E TEMPLATES
# -----------------------------
identidade = (
    "<strong>Voc√™ √© Nanda Mac.ia</strong>, a IA oficial da Nanda Mac, treinada com o conte√∫do do curso "
    "<strong>Consult√≥rio High Ticket</strong>. Responda como uma professora experiente, ajudando o aluno a aplicar o m√©todo na pr√°tica.<br><br>"
)
prompt_variacoes = {
    "explicacao": (
        "<strong>Objetivo:</strong> Explicar com base no conte√∫do das aulas. "
        "Use linguagem clara e t√≥picos. Evite gen√©ricos.<br><br>"
    ),
    # demais templates...
}

# -----------------------------
# GERA√á√ÉO DA RESPOSTA
# -----------------------------
def generate_answer(
    question: str,
    context: str = "",
    history: str = None,
    tipo_de_prompt: str = "explicacao"
) -> str:
    key = normalize(question)
    if key in CANONICAL_QA:
        retur
