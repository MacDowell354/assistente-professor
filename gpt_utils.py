import os
import re
import unicodedata
import random
from openai import OpenAI, OpenAIError
from pypdf import PdfReader

# -----------------------------
# CONFIGURA√á√ÉO DE AMBIENTE
# -----------------------------
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise ValueError("‚ùå Vari√°vel de ambiente OPENAI_API_KEY n√£o encontrada.")
client = OpenAI(api_key=api_key)

# -----------------------------
# VARIA√á√ïES DE SAUDA√á√ÉO E ENCERRAMENTO
# -----------------------------
GREETINGS = [
    "Que √≥tima d√∫vida! üòä",
    "Ol√°, excelente pergunta! üåü",
    "Adorei sua pergunta! ü§ó",
    "√ìtima coloca√ß√£o! ‚ú®",
    "Que bom que veio perguntar isso! üí¨"
]

CLOSINGS = [
    "Qualquer outra d√∫vida, estou por aqui! üíú",
    "Fico √† disposi√ß√£o para ajudar no que precisar! üå∑",
    "Conte sempre comigo ‚Äî sucesso nos seus atendimentos! ‚ú®",
    "Espero que tenha ajudado. At√© a pr√≥xima! ü§ç",
    "Estou aqui para o que voc√™ precisar. Um abra√ßo! ü§ó"
]

# -----------------------------
# CONSTANTES DE MENSAGENS
# -----------------------------
SYSTEM_PROMPT = (
    "Voc√™ √© Nanda Mac.ia, professora virtual experiente no curso Consult√≥rio High Ticket. "
    "Use linguagem acolhedora e did√°tica: inicie com uma sauda√ß√£o variada de GREETINGS, "
    "explique passo a passo como uma professora e finalize com um encerramento de CLOSINGS. "
    "Todas as respostas devem ser em portugu√™s e baseadas nas transcri√ß√µes do curso."
)
OUT_OF_SCOPE_MSG = (
    "Parece que sua pergunta ainda n√£o est√° contemplada nas aulas do curso Consult√≥rio High Ticket. "
    "Mas n√£o se preocupe: nosso conte√∫do est√° sempre em expans√£o! üòä<br><br>"
    "Que tal explorar t√≥picos relacionados, como 'Health Plan', 'Patient Letter' ou 'Plano de A√ß√£o'? "
    "Voc√™ pode reformular sua d√∫vida com base nesses temas ou perguntar sobre qualquer m√≥dulo ou atividade, "
    "e eu ficarei feliz em ajudar com o que estiver ao meu alcance."
)

# -----------------------------
# NORMALIZA√á√ÉO DE CHAVE
# -----------------------------
def normalize_key(text: str) -> str:
    nfkd = unicodedata.normalize("NFD", text)
    ascii_only = "".join(ch for ch in nfkd if unicodedata.category(ch) != "Mn")
    s = ascii_only.lower()
    s = re.sub(r"[^\w\s]", "", s)
    return re.sub(r"\s+", " ", s).strip()

# -----------------------------
# LEITURA DE TRANSCRI√á√ïES
# -----------------------------
BASE_DIR = os.path.dirname(__file__)
try:
    _raw_txt = open(os.path.join(BASE_DIR, "transcricoes.txt"), encoding="utf-8").read()
except FileNotFoundError:
    _raw_txt = ""

# -----------------------------
# FUN√á√ÉO DE BUSCA POR TRECHOS
# -----------------------------

def search_transcripts(question: str, max_sentences: int = 5) -> str:
    if not _raw_txt:
        return ""
    key = normalize_key(question)
    keywords = [w for w in key.split() if len(w) > 3]
    sentences = re.split(r'(?<=[\.\!\?])\s+', _raw_txt)
    matches = []
    for sent in sentences:
        norm = normalize_key(sent)
        if any(word in norm for word in keywords):
            matches.append(sent.strip())
        if len(matches) >= max_sentences:
            break
    return "<br>".join(matches) if matches else ""

# -----------------------------
# RESPOSTAS CAN√îNICAS
# -----------------------------
CANONICAL_QA = {
    # Senso Est√©tico
    "como devo decorar meu consultorio e me vestir para nao afastar o paciente high ticket":
        "Decora√ß√£o: espa√ßos clean, m√≥veis de linhas retas, cores neutras (branco, bege, cinza).<br>"
        "Perfume: fragr√¢ncias leves e universais (Jo Malone ‚ÄúLime Basil & Mandarin‚Äù ou Giovanna Baby).<br>"
        "Uniforme: jaleco branco cl√°ssico sem detalhes, camisa social clara e cal√ßa de corte tradicional (sapato social ou scarpin neutro).",
    # Gatilho da Reciprocidade
    "qual a melhor forma de usar o gatilho da reciprocidade para fidelizar meus pacientes":
        "O gatilho da reciprocidade funciona assim: sempre que voc√™ oferece algo de valor antes mesmo do paciente pagar, ele se sente motivado a retribuir. No Consult√≥rio High Ticket, voc√™ pode:<br>"
        "‚Ä¢ Enviar materiais educativos gr√°tis (e-book, checklist) ap√≥s a primeira consulta.<br>"
        "‚Ä¢ Oferecer uma avalia√ß√£o de cortesia de um item extra (ex.: avalia√ß√£o postural r√°pida).<br>"
        "‚Ä¢ Dar uma amostra de um protocolo complementar (ex.: um mini-exerc√≠cio ou orienta√ß√£o nutricional).<br><br>"
        "Depois, quando for propor seu plano principal, o paciente j√° estar√° predisposto a aceitar.",
}
CANONICAL_QA_NORMALIZED = {normalize_key(k): v for k, v in CANONICAL_QA.items()}

# -----------------------------
# GERA√á√ÉO DE RESPOSTA
# -----------------------------

def generate_answer(question: str, context: str = "", history: list = None, tipo_de_prompt: str = None) -> str:
    saudacao = random.choice(GREETINGS)
    fechamento = random.choice(CLOSINGS)
    key = normalize_key(question)

    # 1) Resposta can√¥nica
    for canon, resp in CANONICAL_QA_NORMALIZED.items():
        if canon in key:
            return f"{saudacao}<br><br>{resp}<br><br>{fechamento}"

    # 2) Fallback via transcri√ß√µes
    snippet = search_transcripts(question)
    if snippet:
        return f"{saudacao}<br><br>{snippet}<br><br>{fechamento}"

    # 3) Fora de escopo
    return f"{saudacao}<br><br>{OUT_OF_SCOPE_MSG}<br><br>{fechamento}"
