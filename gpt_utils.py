import os
import re
import unicodedata
import random
from openai import OpenAI, OpenAIError
from pypdf import PdfReader

# -----------------------------
# CONFIGURA√á√ÉO DE AMBIENTE
# -----------------------------
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise ValueError("‚ùå Vari√°vel de ambiente OPENAI_API_KEY n√£o encontrada.")
client = OpenAI(api_key=api_key)

# -----------------------------
# VARIA√á√ïES DE SAUDA√á√ÉO E ENCERRAMENTO
# -----------------------------
GREETINGS = [
    "Ol√°, doutor! Que bom te ver por aqui! üòä",
    "Oi, que √≥tima d√∫vida! Vamos aprender juntos! ‚ú®",
    "Bem-vindo(a) de volta ao seu espa√ßo de crescimento!",
    "Adorei sua pergunta, √© bem relevante para sua pr√°tica! ü§ó",
    "Que bom que voc√™ veio perguntar, isso mostra comprometimento! üí¨"
]

CLOSINGS = [
    "Qualquer outra d√∫vida, estou sempre por aqui para te apoiar! üíú",
    "Pode contar comigo para esclarecer o que precisar! Sucesso! üå∑",
    "Estou aqui para ajudar ‚Äî n√£o hesite em perguntar sempre! ‚ú®",
    "Espero ter esclarecido, at√© nossa pr√≥xima aula! ü§ç",
    "Continue perguntando, √© assim que voc√™ cresce na profiss√£o! ü§ó"
]

# -----------------------------
# MENSAGEM DE FORA DE ESCOPO
# -----------------------------
OUT_OF_SCOPE_MSG = (
    "Ainda n√£o temos esse tema nas aulas do curso Consult√≥rio High Ticket. Mas vou sinalizar para nossa equipe incluir em breve! "
    "Enquanto isso, recomendo focar no que j√° temos no curso para conquistar resultados concretos no consult√≥rio."
)

# -----------------------------
# NORMALIZA√á√ÉO DE CHAVE
# -----------------------------
def normalize_key(text: str) -> str:
    nfkd = unicodedata.normalize("NFD", text)
    ascii_only = "".join(ch for ch in nfkd if unicodedata.category(ch) != "Mn")
    s = ascii_only.lower()
    s = re.sub(r"[^\w\s]", "", s)
    return re.sub(r"\s+", " ", s).strip()

# -----------------------------
# LEITURA DO ARQUIVO DE TRANSCRI√á√ïES
# -----------------------------
BASE_DIR = os.path.dirname(__file__)
try:
    _raw_txt = open(os.path.join(BASE_DIR, "transcricoes.txt"), encoding="utf-8").read()
except FileNotFoundError:
    _raw_txt = ""

# -----------------------------
# BUSCA DID√ÅTICA POR TRECHOS
# -----------------------------
def search_transcripts(question: str, max_sentences: int = 4) -> str:
    if not _raw_txt:
        return ""
    key = normalize_key(question)
    keywords = [w for w in key.split() if len(w) > 3]
    if not keywords:
        return ""
    sentences = re.split(r'(?<=[\.\!\?])\s+', _raw_txt)
    scored = []
    for sent in sentences:
        norm = normalize_key(sent)
        score = sum(1 for w in keywords if w in norm)
        if score > 0:
            scored.append((score, sent.strip()))
    scored.sort(key=lambda x: x[0], reverse=True)
    top = [s for _, s in scored[:max_sentences]]
    return " ".join(top)

# -----------------------------
# GERADOR DE RESPOSTAS DID√ÅTICAS
# -----------------------------
def generate_answer(question: str, context: str = "", history: list = None, tipo_de_prompt: str = None) -> str:
    saudacao = random.choice(GREETINGS)
    fechamento = random.choice(CLOSINGS)
    key = normalize_key(question)

    # 1) Busca o trecho relevante
    snippet = search_transcripts(question)

    # 2) Se encontrar trecho, interpreta como professora
    if snippet:
        prompt = (
            f"Voc√™ √© Nanda Mac.ia, professora experiente do curso Consult√≥rio High Ticket. "
            f"Explique o trecho abaixo de maneira clara, passo a passo, com exemplos pr√°ticos para m√©dicos, "
            f"usando tom acolhedor e encorajando o aluno a perguntar mais. Comece com sauda√ß√£o calorosa e termine com incentivo.\n\n"
            f"Trecho do curso:\n{snippet}\n\n"
            f"[IMPORTANTE] N√£o invente nada, s√≥ use conte√∫do do trecho. N√£o cite texto literal: ensine, explique e traduza em aula pr√°tica."
        )
        try:
            r = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "Responda SEMPRE em portugu√™s do Brasil."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.5,
                max_tokens=500
            )
        except OpenAIError:
            r = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "Responda SEMPRE em portugu√™s do Brasil."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.5,
                max_tokens=500
            )
        explicacao = r.choices[0].message.content.strip()
        return f"{saudacao}<br><br>{explicacao}<br><br>{fechamento}"

    # 3) Fora de escopo
    return f"{saudacao}<br><br>{OUT_OF_SCOPE_MSG}<br><br>{fechamento}"
