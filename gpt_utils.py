import os
import json
import logging
from openai import OpenAI, OpenAIError

# -----------------------------
# LOGGING
# -----------------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -----------------------------
# API KEY
# -----------------------------
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise ValueError("‚ùå Vari√°vel de ambiente OPENAI_API_KEY n√£o encontrada.")
client = OpenAI(api_key=api_key)

# -----------------------------
# MENSAGEM FORA DE ESCOPO
# -----------------------------
OUT_OF_SCOPE_MSG = (
    "Essa pergunta √© muito boa, mas no momento ela est√° <strong>fora do conte√∫do abordado nas aulas do curso "
    "Consult√≥rio High Ticket</strong>. Isso pode indicar uma oportunidade de melhoria do nosso material! üòä<br><br>"
    "Vamos sinalizar esse tema para a equipe pedag√≥gica avaliar a inclus√£o em vers√µes futuras do curso. "
    "Enquanto isso, recomendamos focar nos ensinamentos j√° dispon√≠veis para ter os melhores resultados poss√≠veis no consult√≥rio."
)

# -----------------------------
# RESUME TRANSCRI√á√ïES (startup)
# -----------------------------
TRANSCRIPT_PATH = os.path.join(os.path.dirname(__file__), "transcricoes.txt")
_raw = open(TRANSCRIPT_PATH, encoding="utf-8").read()
try:
    resp = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": (
                "Voc√™ √© um resumidor especialista em educa√ß√£o. "
                "Resuma em at√© 300 palavras o conte√∫do do curso ‚ÄúConsult√≥rio High Ticket‚Äù "
                "para servir de base na classifica√ß√£o de escopo e tipo de prompt."
            )},
            {"role": "user", "content": _raw}
        ]
    )
    COURSE_SUMMARY = resp.choices[0].message.content
    logger.info("Resumo do curso carregado com sucesso.")
except Exception as e:
    COURSE_SUMMARY = ""
    logger.warning("Falha ao resumir transcricoes: %s", e)

# -----------------------------
# PALAVRAS-CHAVE POR TIPO
# -----------------------------
TYPE_KEYWORDS = {
    "revisao":                        ["revis√£o", "revisao", "revise", "resumir"],
    "precificacao":                   ["precifica√ß√£o", "precificacao", "precificar", "pre√ßo", "valor", "faturamento"],
    "health_plan":                    ["health plan", "valor do health plan", "retorno do investimento"],
    "capitacao_sem_marketing_digital":["offline", "sem usar instagram", "sem instagram", "sem an√∫ncios", "sem anuncios"],
    "aplicacao":                      ["como aplico", "aplica√ß√£o", "aplico", "roteiro"],
    "faq":                            ["quais", "d√∫vidas", "duvidas", "pergunta frequente"],
    "explicacao":                     ["explique", "o que √©", "defina", "conceito"]
}

# -----------------------------
# TEMPLATES E IDENTIDADE
# -----------------------------
identidade = (
    "<strong>Voc√™ √© Nanda Mac.ia</strong>, a IA oficial da Nanda Mac, treinada com o conte√∫do do curso "
    "<strong>Consult√≥rio High Ticket</strong>. Responda como uma professora experiente, ajudando o aluno a aplicar o m√©todo na pr√°tica.<br><br>"
)

prompt_variacoes = {
    "explicacao": (
        "<strong>Objetivo:</strong> Explicar com base no conte√∫do das aulas‚Ä¶<br><br>"
    ),
    "faq": (
        "<strong>Objetivo:</strong> Responder d√∫vida frequente‚Ä¶"
    ),
    "revisao": (
        "<strong>Objetivo:</strong> Fazer revis√£o r√°pida do m√©todo de precifica√ß√£o estrat√©gica em 6 bullets‚Ä¶<br><br>"
    ),
    "aplicacao": (
        "<strong>Objetivo:</strong> Aplicar roteiro de atendimento High Ticket na primeira consulta (6 bullets)‚Ä¶<br><br>"
    ),
    "correcao": (
        "<strong>Objetivo:</strong> Corrigir gentilmente confus√µes‚Ä¶<br><br>"
    ),
    "capitacao_sem_marketing_digital": (
        "<strong>Objetivo:</strong> Estrat√©gia 100% offline para atrair pacientes de alto valor sem Instagram‚Ä¶<br><br>"
    ),
    "precificacao": (
        "<strong>Objetivo:</strong> Explicar precifica√ß√£o estrat√©gica, mantendo **Health Plan** em ingl√™s‚Ä¶<br><br>"
    ),
    "health_plan": (
        "<strong>Objetivo:</strong> Estruturar apresenta√ß√£o de valor do **Health Plan**, incluindo benef√≠cios tang√≠veis e hist√≥rias de sucesso‚Ä¶<br><br>"
    )
}

# -----------------------------
# CLASSIFICADOR
# -----------------------------
def classify_prompt(question: str) -> dict:
    lower_q = question.lower()
    for tipo, keys in TYPE_KEYWORDS.items():
        if any(k in lower_q for k in keys):
            return {"scope": "IN_SCOPE", "type": tipo}

    # fallback via GPT
    payload = (
        "Voc√™ √© um classificador inteligente. Com base no resumo e na pergunta abaixo, "
        "responda **apenas** um JSON com duas chaves:\n"
        "  ‚Ä¢ scope: 'IN_SCOPE' ou 'OUT_OF_SCOPE'\n"
        "  ‚Ä¢ type: nome de um template (ex: 'explicacao', 'health_plan', ‚Ä¶)\n\n"
        f"Resumo do curso:\n{COURSE_SUMMARY}\n\n"
        f"Pergunta:\n{question}\n\n"
        "Exemplo de resposta:\n"
        '{ "scope": "IN_SCOPE", "type": "health_plan" }'
    )
    try:
        r = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "system", "content": payload}]
        )
        return json.loads(r.choices[0].message.content)
    except Exception as e:
        logger.warning("Classifier fallback falhou: %s", e)
        return {"scope": "OUT_OF_SCOPE", "type": "explicacao"}

# -----------------------------
# GERA√á√ÉO DE RESPOSTA
# -----------------------------
def generate_answer(
    question: str,
    context: str = "",
    history: str | None = None
) -> str:
    cls = classify_prompt(question)
    if cls["scope"] == "OUT_OF_SCOPE":
        return OUT_OF_SCOPE_MSG

    tipo = cls["type"]
    template = prompt_variacoes.get(tipo, prompt_variacoes["explicacao"])

    ctx = (
        f"<br><br><strong>üìö Contexto relevante:</strong><br>{context}<br>"
        if context.strip() and tipo != "capitacao_sem_marketing_digital" else ""
    )
    hist = (
        f"<br><strong>üìú Hist√≥rico anterior:</strong><br>{history}<br>"
        if history else ""
    )

    full_prompt = (
        identidade
        + template
        + ctx
        + f"<br><strong>ü§î Pergunta:</strong><br>{question}<br><br><strong>üß† Resposta:</strong><br>"
        + hist
    )

    try:
        resp = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": full_prompt}]
        )
        return resp.choices[0].message.content.strip()

    except OpenAIError as e:
        msg = str(e).lower()
        if "rate limit" in msg:
            return "Limite de requisi√ß√µes atingido. Tente novamente mais tarde."
        if "invalid api key" in msg or "authentication" in msg:
            return "Erro de autentica√ß√£o com o servi√ßo de IA."
        logger.error("OpenAIError: %s", e)
        return "Erro ao obter resposta da IA."
    except Exception as e:
        logger.exception("Erro inesperado ao gerar resposta: %s", e)
        return "Erro interno ao processar sua solicita√ß√£o."
