import os
import json
import re
from openai import OpenAI, OpenAIError
from pypdf import PdfReader

# -----------------------------
# CONFIGURA√á√ÉO DE AMBIENTE
# -----------------------------
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise ValueError("‚ùå Vari√°vel de ambiente OPENAI_API_KEY n√£o encontrada.")
client = OpenAI(api_key=api_key)

# -----------------------------
# MENSAGEM PADR√ÉO PARA FORA DE ESCOPO
# -----------------------------
OUT_OF_SCOPE_MSG = (
    "Essa pergunta √© muito boa, mas no momento ela est√° <strong>fora do conte√∫do abordado nas aulas do curso "
    "Consult√≥rio High Ticket</strong>. Isso pode indicar uma oportunidade de melhoria do nosso material! üòä<br><br>"
    "Vamos sinalizar esse tema para a equipe pedag√≥gica avaliar a inclus√£o em vers√µes futuras do curso. "
    "Enquanto isso, recomendamos focar nos ensinamentos j√° dispon√≠veis para ter os melhores resultados poss√≠veis no consult√≥rio."
)

# -----------------------------
# NORMALIZA√á√ÉO DE CHAVE
# -----------------------------
def normalize_key(text: str) -> str:
    s = text.lower()
    s = re.sub(r"[^\w\s]", "", s)
    s = re.sub(r"\s+", " ", s).strip()
    return s

# -----------------------------
# CARREGA TRANSCRI√á√ïES E PDFs
# -----------------------------
BASE_DIR = os.path.dirname(__file__)

_raw_txt = open(os.path.join(BASE_DIR, "transcricoes.txt"), encoding="utf-8").read()

PDF1_PATH = os.path.join(BASE_DIR, "PlanodeAcaoConsultorioHighTicket-1Semana (4)[1].pdf")
_raw_pdf1 = ""
try:
    reader1 = PdfReader(PDF1_PATH)
    _raw_pdf1 = "\n\n".join(page.extract_text() or "" for page in reader1.pages)
except:
    _raw_pdf1 = ""

PDF2_PATH = os.path.join(BASE_DIR, "GuiadoCursoConsultorioHighTicket.-CHT21[1].pdf")
_raw_pdf2 = ""
try:
    reader2 = PdfReader(PDF2_PATH)
    _raw_pdf2 = "\n\n".join(page.extract_text() or "" for page in reader2.pages)
except:
    _raw_pdf2 = ""

# Para classifica√ß√£o (n√£o usado diretamente nas respostas can√¥nicas)
_combined = "\n\n".join([_raw_txt, _raw_pdf1, _raw_pdf2])
try:
    resp = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content":
                "Voc√™ √© um resumidor especialista em educa√ß√£o. Resuma em at√© 300 palavras todo o conte√∫do "
                "do curso Consult√≥rio High Ticket, incluindo Plano de A√ß√£o (1¬™ Semana) e Guia do Curso, "
                "para servir de base na classifica√ß√£o de prompts."
            },
            {"role": "user", "content": _combined}
        ]
    )
    COURSE_SUMMARY = resp.choices[0].message.content
except OpenAIError:
    COURSE_SUMMARY = ""

# -----------------------------
# PALAVRAS-CHAVE PARA CLASSIFICA√á√ÉO
# -----------------------------
TYPE_KEYWORDS = {
    "revisao":                        ["revis√£o", "revise", "resumir"],
    "precificacao":                   ["precifica√ß√£o", "precificar", "pre√ßo", "valor", "faturamento"],
    "health_plan":                    ["health plan", "retorno do investimento"],
    "capitacao_sem_marketing_digital":["offline", "sem instagram", "sem an√∫ncios"],
    "aplicacao":                      ["como aplico", "aplica√ß√£o", "roteiro"],
    "faq":                            ["quais", "pergunta frequente"],
    "explicacao":                     ["explique", "o que √©", "defina"],
    "plano_de_acao":                  ["plano de a√ß√£o", "primeira semana"],
    "guia":                           ["guia do curso", "passo a passo", "cht21"],
    "checklist":                      ["checklist", "fase 1", "fase 2", "fase 3", "fase 4", "fase 5"]
}

# -----------------------------
# RESPOSTAS CAN√îNICAS NORMALIZADAS
# -----------------------------
CANONICAL_QA = {
    # ‚Äî Checklist Consult√≥rio High Ticket ‚Äî
    "nanda o que significa implementar health plan para apresentar os valores de tratamentos na fase 1 do checklist":
        "Significa que voc√™ deve usar o modelo de Health Plan para detalhar cada op√ß√£o de tratamento "
        "(protocolos, cirurgias, etc.), expondo claramente investimento e benef√≠cios para o paciente. "
        "Assim, voc√™ garante transpar√™ncia e percep√ß√£o de valor desde o primeiro contato.",
    "nanda na fase 2 como defino quais brindes high ticket oferecer aos meus melhores pacientes":
        "Escolha brindes que reforcem o posicionamento premium do seu consult√≥rio, como kits personalizados "
        "(canecas de cer√¢mica, velas arom√°ticas sofisticadas) ou vouchers de experi√™ncias exclusivas "
        "(sess√£o de massagem, avalia√ß√£o est√©tica). Alinhe sempre ao perfil ‚ÄúKey Man‚Äù ou ‚ÄúKey Woman‚Äù.",
    "nanda por que retirar o jardim vertical na area de recepcao conforme indicado":
        "O jardim vertical pode gerar distra√ß√£o e ru√≠do visual no ambiente High Ticket. Retir√°-lo mant√©m "
        "o foco na experi√™ncia de exclusividade, com decora√ß√£o mais clean e sofisticada.",
    "nanda qual a importancia de implementar som ambiente com a playlist consultorio high ticket":
        "A trilha sonora certa cria uma atmosfera acolhedora e profissional. A Playlist Consult√≥rio High Ticket "
        "foi curada para transmitir tranquilidade e exclusividade, melhorando a experi√™ncia do paciente.",
    "nanda como usar o checklist em pdf para acompanhar minhas tarefas concluidas":
        "Voc√™ pode baixar o PDF preench√≠vel abaixo e ir marcando cada item √† medida que conclui. Assim, ter√° "
        "um registro visual do seu progresso fase a fase:<br>"
        "<a href=\"sandbox:/mnt/data/CHECKLISTCONSULTORIOHIGHTICKET.pdf\" target=\"_blank\">"
        "üì• Download do Checklist Consult√≥rio High Ticket (PDF preench√≠vel)</a>."
}

# normaliza chaves
CANONICAL_QA_NORMALIZED = {
    normalize_key(k): v for k, v in CANONICAL_QA.items()
}

# -----------------------------
# CLASSIFICADOR DE ESCOPO + TIPO
# -----------------------------
def classify_prompt(question: str) -> dict:
    lower = question.lower()
    if "exerc√≠cio" in lower or "exercicios" in lower:
        return {"scope": "OUT_OF_SCOPE", "type": "explicacao"}
    for t, kws in TYPE_KEYWORDS.items():
        if any(k in lower for k in kws):
            return {"scope": "IN_SCOPE", "type": t}
    return {"scope": "OUT_OF_SCOPE", "type": "explicacao"}

# -----------------------------
# FUN√á√ÉO PRINCIPAL
# -----------------------------
def generate_answer(question: str, context: str = "", history: str = None) -> str:
    # 1) Resposta can√¥nica
    key = normalize_key(question)
    if key in CANONICAL_QA_NORMALIZED:
        return CANONICAL_QA_NORMALIZED[key]

    # 2) Fallback de escopo/tipo
    cls = classify_prompt(question)
    if cls["scope"] == "OUT_OF_SCOPE":
        return OUT_OF_SCOPE_MSG

    # 3) Constru√ß√£o de prompt din√¢mico
    tipo = cls["type"]
    prompt = (
        "<strong>Voc√™ √© Nanda Mac.ia</strong>, a IA oficial da Nanda Mac, treinada com o conte√∫do do curso "
        "<strong>Consult√≥rio High Ticket</strong>. Responda como uma professora experiente, ajudando o aluno a aplicar o m√©todo na pr√°tica.<br><br>"
    )
    # Templating b√°sico (pode expandir para cada tipo se desejar)
    prompt += f"<strong>Objetivo:</strong> {tipo.replace('_', ' ').capitalize()}.<br><br>"
    if context:
        prompt += f"<strong>Contexto relevante:</strong><br>{context}<br><br>"
    if history:
        prompt += f"<strong>Hist√≥rico anterior:</strong><br>{history}<br><br>"
    prompt += f"<strong>Pergunta:</strong><br>{question}<br><br><strong>Resposta:</strong><br>"

    # 4) Chamada √† OpenAI
    try:
        r = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
    except OpenAIError:
        r = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
    return r.choices[0].message.content
