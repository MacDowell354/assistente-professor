import os
import re
import random
from openai import OpenAI, OpenAIError

# Configurar seu arquivo de transcri√ß√µes
TRANSCRIPTS_PATH = os.path.join(os.path.dirname(__file__), "transcricoes.txt")

client = OpenAI()

OUT_OF_SCOPE_MSG = (
    "Desculpe, ainda n√£o tenho informa√ß√µes suficientes sobre esse tema espec√≠fico do curso. "
    "Por favor, envie outra pergunta ou consulte o material da aula."
)

GREETINGS = [
    "Ol√°, Doutor(a), seja muito bem-vindo(a)!",
    "Oi, Doutor(a), tudo bem? Como posso ajudar?",
    "Bem-vindo(a) de volta, Doutor(a)!",
    "Ol√°, Doutor(a)! Estou aqui para apoiar voc√™ no seu crescimento"
]

CLOSINGS = [
    "Se quiser um exemplo pr√°tico ou modelo, clique nos bot√µes abaixo.",
    "Tem outro desafio no seu consult√≥rio? Me conte ou clique em Novo Tema.",
    "Se quiser aprofundar, escolha uma op√ß√£o r√°pida ou pergunte de novo!",
    "Quer mudar de assunto? S√≥ digitar ‚Äònovo tema‚Äô.",
    "Essa resposta te ajudou? Clique em üëç ou üëé."
]

CUMPRIMENTOS_RESPOSTAS = {
    "bom dia": "Bom dia! Se quiser tirar d√∫vidas sobre o curso, √© s√≥ perguntar. Estou √† disposi√ß√£o.",
    "boa tarde": "Boa tarde! Se quiser tirar d√∫vidas sobre o curso, √© s√≥ perguntar. Estou √† disposi√ß√£o.",
    "boa noite": "Boa noite! Estou aqui para ajudar. Pode enviar sua d√∫vida quando quiser.",
    "oi": "Oi, Doutor(a)! üòä Seja bem-vindo(a)! Pode enviar sua d√∫vida quando quiser.",
    "ol√°": "Ol√°! Estou aqui para ajudar. Pode perguntar sobre Consult√≥rio High Ticket quando quiser!",
    "ola": "Ol√°! Estou aqui para ajudar. Pode perguntar sobre Consult√≥rio High Ticket quando quiser!",
    "tudo bem": "Tudo √≥timo por aqui! Se quiser perguntar algo sobre o curso, fique √† vontade.",
    "oi, tudo bem": "Oi, tudo bem! Se quiser tirar d√∫vidas, pode perguntar que estou √† disposi√ß√£o.",
    "e a√≠": "E a√≠! Se quiser tirar d√∫vidas sobre o curso, estou por aqui para te ajudar."
}

CHIP_PERGUNTAS = [
    "Ver Exemplo de Plano", "Modelo no Canva", "Modelo PDF", "Novo Tema",
    "Preciso de exemplo", "Exemplo para Acne", "Tratamento Oral", "Cuidados Di√°rios",
    "Baixar Plano de A√ß√£o", "Baixar Guia do Curso", "Baixar Dossi√™ 007", "Baixar Check-list"
]

def is_greeting(question):
    pergunta = question.strip().lower()
    for c in CUMPRIMENTOS_RESPOSTAS.keys():
        if pergunta == c or pergunta.startswith(c):
            return c
    return None

def remove_greeting_from_question(question):
    pergunta = question.strip().lower()
    for c in CUMPRIMENTOS_RESPOSTAS.keys():
        if pergunta.startswith(c):
            pergunta_sem_cumprimento = pergunta[len(c):].lstrip(" ,.!?;-")
            return pergunta_sem_cumprimento
    return pergunta

def normalize_text(text):
    text = text.lower()
    text = re.sub(r"[^a-z0-9\s]", "", text)
    return text

def search_transcripts_by_theme(theme):
    theme_norm = normalize_text(theme)
    if not os.path.exists(TRANSCRIPTS_PATH):
        return None

    with open(TRANSCRIPTS_PATH, "r", encoding="utf-8") as f:
        content = f.read()

    content_norm = normalize_text(content)
    pos = content_norm.find(theme_norm)
    if pos == -1:
        palavras = theme_norm.split()
        for palavra in palavras:
            pos = content_norm.find(palavra)
            if pos != -1:
                break
        else:
            return None

    start = max(0, pos - 500)
    end = min(len(content), pos + 500)
    snippet = content[start:end]
    return snippet.strip()

def gerar_quick_replies(question, explicacao, history=None):
    base_replies = ["Novo Tema", "Preciso de exemplo"]
    tema_healthplan = False
    tema_acne = False
    tema_plano_acao = False
    tema_guia_curso = False
    tema_dossie_007 = False
    tema_checklist = False

    PLANO_ACAO_KEYWORDS = [
        "plano de a√ß√£o", "pdf plano de a√ß√£o", "atividade da primeira semana",
        "material do onboarding", "a√ß√£o consult√≥rio", "plano onboarding",
        "plano de a√ß√£o consult√≥rio", "atividade plano", "baixar plano de a√ß√£o"
    ]
    GUIA_CURSO_KEYWORDS = [
        "guia do curso", "guia cht", "guia consult√≥rio high ticket",
        "manual do curso", "manual cht", "material de onboarding",
        "passos iniciais", "guia onboarding", "baixar guia do curso"
    ]
    DOSSI√ä_007_KEYWORDS = [
        "dossi√™ 007", "dossie 007", "dossi√™ capta√ß√£o", "dossie aula 5.8",
        "capta√ß√£o de pacientes", "estrat√©gias 007", "baixar dossi√™ 007"
    ]
    CHECKLIST_KEYWORDS = [
        "check-list consult√≥rio", "checklist consult√≥rio", "checklist high ticket",
        "check-list high ticket", "checklist aula 6.8", "baixar check-list", "checklist cht"
    ]

    if history and isinstance(history, list) and len(history) > 0:
        for msg in history:
            if "user" in msg and isinstance(msg["user"], str):
                q = msg["user"].lower()
                if any(x in q for x in ["health plan", "healthplan", "realplan"]):
                    tema_healthplan = True
                    break
                elif "acne" in q:
                    tema_acne = True
                    break
                elif any(x in q for x in PLANO_ACAO_KEYWORDS):
                    tema_plano_acao = True
                    break
                elif any(x in q for x in GUIA_CURSO_KEYWORDS):
                    tema_guia_curso = True
                    break
                elif any(x in q for x in DOSSI√ä_007_KEYWORDS):
                    tema_dossie_007 = True
                    break
                elif any(x in q for x in CHECKLIST_KEYWORDS):
                    tema_checklist = True
                    break
    else:
        q = question.lower()
        if any(x in q for x in ["health plan", "healthplan", "realplan"]):
            tema_healthplan = True
        elif "acne" in q:
            tema_acne = True
        elif any(x in q for x in PLANO_ACAO_KEYWORDS):
            tema_plano_acao = True
        elif any(x in q for x in GUIA_CURSO_KEYWORDS):
            tema_guia_curso = True
        elif any(x in q for x in DOSSI√ä_007_KEYWORDS):
            tema_dossie_007 = True
        elif any(x in q for x in CHECKLIST_KEYWORDS):
            tema_checklist = True

    replies = []
    if tema_healthplan:
        replies += ["Ver Exemplo de Plano", "Modelo no Canva"]
    elif tema_acne:
        replies += ["Exemplo para Acne", "Tratamento Oral", "Cuidados Di√°rios"]
    if tema_plano_acao:
        replies += ["Baixar Plano de A√ß√£o"]
    if tema_guia_curso:
        replies += ["Baixar Guia do Curso"]
    if tema_dossie_007:
        replies += ["Baixar Dossi√™ 007"]
    if tema_checklist:
        replies += ["Baixar Check-list"]
    if not replies:
        replies = base_replies

    usados = set()
    if history and isinstance(history, list):
        for msg in history:
            if "chip" in msg and msg["chip"]:
                usados.add(msg["chip"].strip().lower())
            if "user" in msg and msg["user"]:
                u = msg["user"].strip().lower()
                if u in [x.lower() for x in replies]:
                    usados.add(u)
    ESSENCIAIS = [
        "modelo no canva", "baixar plano de a√ß√£o", "baixar guia do curso", "baixar dossi√™ 007", "baixar check-list"
    ]
    filtered = []
    for r in replies:
        if r.lower() in ESSENCIAIS:
            if r.lower() not in usados:
                filtered.append(r)
        else:
            if r.lower() not in usados:
                filtered.append(r)
    if len(filtered) < 2:
        filtered += [r for r in base_replies if r not in filtered]
    return filtered[:3]

def generate_answer(
    question, context="", history=None, tipo_de_prompt=None, is_first_question=True
):
    cumprimento_detectado = is_greeting(question)
    pergunta_limpa = remove_greeting_from_question(question)

    # --- Bloco especial: PDF Plano de A√ß√£o ---
    PLANO_ACAO_KEYWORDS = [
        "plano de a√ß√£o", "pdf plano de a√ß√£o", "atividade da primeira semana",
        "material do onboarding", "a√ß√£o consult√≥rio", "plano onboarding",
        "plano de a√ß√£o consult√≥rio", "atividade plano", "baixar plano de a√ß√£o"
    ]
    pergunta_baixar_plano = any(x in pergunta_limpa for x in PLANO_ACAO_KEYWORDS) or \
        (question and any(x in question.lower() for x in PLANO_ACAO_KEYWORDS))
    if pergunta_baixar_plano or (question.strip().lower() == "baixar plano de a√ß√£o"):
        resposta = (
            "<strong>Plano de A√ß√£o do Consult√≥rio High Ticket</strong><br>"
            "Esse material faz parte do onboarding do curso e √© essencial para voc√™ organizar seus pr√≥ximos passos.<br><br>"
            "<b>O que voc√™ vai encontrar nesse PDF:</b><br>"
            "- Reflex√£o sobre bloqueios financeiros e autoconfian√ßa<br>"
            "- Defini√ß√£o de nicho de atua√ß√£o e ajustes de posicionamento<br>"
            "- Planejamento de a√ß√µes pr√°ticas para atrair pacientes High Ticket j√° na primeira semana<br>"
            "- Exerc√≠cios para transformar sua mentalidade e o consult√≥rio<br><br>"
            "<a class='chip' href='https://nandamac-my.sharepoint.com/:b:/p/lmacdowell/EV6wZ42I9nhHpmnSGa4DHfEBaff0ewZIsmH_4LqLAI46eQ?e=gd5hR0' target='_blank'>üìÑ Baixar Plano de A√ß√£o do Consult√≥rio High Ticket</a><br><br>"
            "Voc√™ tamb√©m pode baixar esse PDF dentro do m√≥dulo de onboarding, na sua √°rea de alunos.<br>"
            "Se tiver dificuldade para acessar, me avise que envio suporte!"
        )
        return resposta, []

    # --- Bloco especial: PDF Guia do Curso ---
    GUIA_CURSO_KEYWORDS = [
        "guia do curso", "guia cht", "guia consult√≥rio high ticket",
        "manual do curso", "manual cht", "material de onboarding",
        "passos iniciais", "guia onboarding", "baixar guia do curso"
    ]
    pergunta_guia_curso = any(x in pergunta_limpa for x in GUIA_CURSO_KEYWORDS) or \
        (question and any(x in question.lower() for x in GUIA_CURSO_KEYWORDS))
    if pergunta_guia_curso or (question.strip().lower() == "baixar guia do curso"):
        resposta = (
            "<strong>Guia do Curso Consult√≥rio High Ticket</strong><br>"
            "Esse material √© essencial para te orientar nos primeiros passos do curso, desde o onboarding at√© as tarefas e integra√ß√£o na comunidade.<br><br>"
            "<b>O que voc√™ encontra nesse guia:</b><br>"
            "- Passo a passo para assistir √† aula de onboarding<br>"
            "- Como entrar no grupo de avisos da sua turma<br>"
            "- Como acessar a √°rea de membros e comunidade<br>"
            "- Detalhes sobre o Desafio Health Plan<br>"
            "- Como participar das atividades da primeira semana<br>"
            "- Canais de suporte e regras de uso<br><br>"
            "<a class='chip' href='https://nandamac-my.sharepoint.com/:b:/p/lmacdowell/EQZrQJpHXlVCsK1N5YdDIHEBHocn7FR2yQUHhydgN84yOw?e=GAut9r' target='_blank'>üìÑ Baixar Guia do Curso Consult√≥rio High Ticket</a><br><br>"
            "Voc√™ tamb√©m pode encontrar esse PDF fixado no m√≥dulo de onboarding da sua √°rea de alunos.<br>"
            "Se precisar de ajuda para acessar, me avise por aqui!"
        )
        return resposta, []

    # --- Bloco especial: PDF Dossi√™ 007 ---
    DOSSI√ä_007_KEYWORDS = [
        "dossi√™ 007", "dossie 007", "dossi√™ capta√ß√£o", "dossie aula 5.8",
        "capta√ß√£o de pacientes", "estrat√©gias 007", "baixar dossi√™ 007"
    ]
    pergunta_dossie_007 = any(x in pergunta_limpa for x in DOSSI√ä_007_KEYWORDS) or \
        (question and any(x in question.lower() for x in DOSSI√ä_007_KEYWORDS))
    if pergunta_dossie_007 or (question.strip().lower() == "baixar dossi√™ 007"):
        resposta = (
            "<strong>Dossi√™ 007 ‚Äì Capta√ß√£o de Pacientes High Ticket</strong><br>"
            "Esse material especial faz parte da Aula 5.8 do curso e re√∫ne 3 estrat√©gias comprovadas para voc√™ captar, reter e fidelizar pacientes High Ticket de forma √©tica e lucrativa.<br><br>"
            "<b>O que voc√™ encontra nesse PDF:</b><br>"
            "- Networking inteligente com outros profissionais da sa√∫de para gerar indica√ß√µes<br>"
            "- Scripts prontos para confirma√ß√£o e remarca√ß√£o de consultas (elimine faltas e remarca√ß√µes)<br>"
            "- Scripts e estrat√©gias para reativar pacientes antigos<br>"
            "- T√©cnicas de encantamento, reciprocidade e presentes memor√°veis para fidelizar<br><br>"
            "<a class='chip' href='https://nandamac-my.sharepoint.com/:b:/p/lmacdowell/EVdOpjU1frVBhApTKmmYAwgBFkbNggnj2Cp0w9luTajxgg?e=iQOnk0' target='_blank'>üìÑ Baixar Dossi√™ 007 ‚Äì Capta√ß√£o de Pacientes High Ticket</a><br><br>"
            "Esse PDF est√° dispon√≠vel na Aula 5.8 do M√≥dulo 5 e pode ser baixado sempre que precisar.<br>"
            "Se tiver qualquer d√∫vida para aplicar as a√ß√µes, pode me perguntar por aqui!"
        )
        return resposta, []

    # --- Bloco especial: PDF Check-list Consult√≥rio High Ticket ---
    CHECKLIST_KEYWORDS = [
        "check-list consult√≥rio", "checklist consult√≥rio", "checklist high ticket",
        "check-list high ticket", "checklist aula 6.8", "baixar check-list", "checklist cht"
    ]
    pergunta_checklist = any(x in pergunta_limpa for x in CHECKLIST_KEYWORDS) or \
        (question and any(x in question.lower() for x in CHECKLIST_KEYWORDS))
    if pergunta_checklist or (question.strip().lower() == "baixar check-list"):
        resposta = (
            "<strong>Check-list do Consult√≥rio High Ticket</strong><br>"
            "Esse material pr√°tico da Aula 6.8 traz uma lista detalhada de ajustes para transformar seu consult√≥rio em um ambiente High Ticket, desde atendimento e linguagem at√© ambiente f√≠sico e equipe.<br><br>"
            "<b>O que voc√™ encontra neste check-list:</b><br>"
            "- Adapta√ß√£o da linguagem para encantar e fidelizar pacientes<br>"
            "- Scripts e rotinas para atendimento High Ticket<br>"
            "- Padr√£o visual e organiza√ß√£o do ambiente<br>"
            "- Brindes, pol√≠tica de descontos, apresenta√ß√£o de valores<br>"
            "- Check-list por etapas: atendimento, ambiente, posicionamento digital e mais<br><br>"
            "<a class='chip' href='https://nandamac-my.sharepoint.com/:b:/p/lmacdowell/EaV1U2Y-6CZHoVL8DhxYDXQBeMienn2uZG4Qsruo1sBcuw?e=pTXlmu' target='_blank'>üìÑ Baixar Check-list do Consult√≥rio High Ticket</a><br><br>"
            "Esse PDF est√° dispon√≠vel na Aula 6.8 e pode ser baixado a qualquer momento.<br>"
            "Se quiser detalhar algum item ou receber dicas pr√°ticas para aplicar cada etapa, √© s√≥ perguntar!"
        )
        return resposta, []

    # Evita sauda√ß√£o/repeti√ß√£o para chips
    is_chip = any(question.strip().lower() == c.lower() for c in CHIP_PERGUNTAS)
    mostrar_saudacao = is_first_question and not is_chip
    mostrar_pergunta_repetida = is_first_question and not is_chip

    saudacao = random.choice(GREETINGS) if mostrar_saudacao else ""
    fechamento = random.choice(CLOSINGS)

    snippet = search_transcripts_by_theme(pergunta_limpa if pergunta_limpa.strip() else question)
    pergunta_repetida = (
        f"<strong>Sua pergunta:</strong> \"{question}\"<br><br>" if mostrar_pergunta_repetida else ""
    )

    if history:
        prompt = (
            f"Voc√™ √© Nanda Mac.ia, professora do curso Consult√≥rio High Ticket.\n"
            f"Abaixo est√° a conversa at√© agora entre o aluno e a professora:\n\n"
            f"{history}\n\n"
            f"O aluno enviou agora:\n"
            f"'{question}'\n\n"
            "Continue a conversa considerando o contexto anterior. Se o aluno pedir mais detalhes, exemplos, ou disser 'mais espec√≠fico', aprofunde sobre o assunto que estavam conversando, sem mudar de tema e sem repetir tudo do zero."
            "\nSe for uma d√∫vida nova, responda normalmente."
            "\n[IMPORTANTE] Seja did√°tica, acolhedora e responda exatamente ao que o aluno pediu."
            "\nUtilize o conte√∫do abaixo como base para a resposta:\n"
            f"{snippet}\n"
        )
    else:
        prompt = (
            f"Voc√™ √© Nanda Mac.ia, professora do curso Consult√≥rio High Ticket.\n"
            f"O aluno fez a seguinte pergunta:\n\n"
            f"'{question}'\n\n"
            "Responda de forma extremamente objetiva e did√°tica, exatamente como faria numa aula particular.\n"
            "Forne√ßa uma resposta estruturada em t√≥picos numerados, utilizando exemplos pr√°ticos e claros.\n"
            "Use APENAS o conte√∫do fornecido abaixo como refer√™ncia e responda diretamente √† pergunta feita,\n"
            "sem introdu√ß√µes ou divaga√ß√µes gerais:\n\n"
            f"{snippet}\n\n"
            "[IMPORTANTE] Seja objetiva, acolhedora e responda EXCLUSIVAMENTE ao tema solicitado."
        )

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Responda SEMPRE em portugu√™s do Brasil."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.4,
            max_tokens=500
        )
    except OpenAIError:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Responda SEMPRE em portugu√™s do Brasil."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.4,
            max_tokens=500
        )

    explicacao = response.choices[0].message.content.strip()
    quick_replies = gerar_quick_replies(question, explicacao, history)

    resposta = ""
    if mostrar_saudacao:
        resposta += f"{saudacao}<br><br>{pergunta_repetida}{explicacao}<br><br>{fechamento}"
    else:
        resposta += f"{explicacao}<br><br>{fechamento}"

    return resposta, quick_replies
