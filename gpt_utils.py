import os
import re
import unicodedata
import random
from openai import OpenAI, OpenAIError
from pypdf import PdfReader

# -----------------------------
# CONFIGURA√á√ÉO DE AMBIENTE
# -----------------------------
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise ValueError("‚ùå Vari√°vel de ambiente OPENAI_API_KEY n√£o encontrada.")
client = OpenAI(api_key=api_key)

# -----------------------------
# VARIA√á√ïES DE SAUDA√á√ÉO E ENCERRAMENTO
# -----------------------------
GREETINGS = [
    "Ol√°, que bom ver voc√™ por aqui! üòä",
    "Oi! Espero que seu dia esteja √≥timo! üåü",
    "Bem-vindo de volta! Como posso ajudar hoje? ü©∫",
    "Oi, tudo bem? Vamos l√°, qual a sua d√∫vida? üí¨",
    "Ol√°! Conte comigo para o que precisar! ü§ó"
]

CLOSINGS = [
    "Qualquer outra d√∫vida, estou por aqui! üíú",
    "Fico √† disposi√ß√£o para ajudar no que precisar! üå∑",
    "Conte sempre comigo ‚Äî sucesso nos seus atendimentos! ‚ú®",
    "Espero ter ajudado. At√© a pr√≥xima! ü§ç",
    "Estou aqui para o que voc√™ precisar. Um abra√ßo! ü§ó"
]

# -----------------------------
# CONSTANTES DE MENSAGENS
# -----------------------------
SYSTEM_PROMPT = (
    "Voc√™ √© Nanda Mac.ia, professora virtual experiente no curso Consult√≥rio High Ticket. "
    "Use linguagem acolhedora e did√°tica: ofere√ßa sauda√ß√µes variadas, explique passo a passo "
    "e finalize com uma frase de encerramento acolhedora. Todas as respostas devem ser em portugu√™s."
)
OUT_OF_SCOPE_MSG = (
    "Parece que sua pergunta ainda n√£o est√° contemplada nas aulas do curso Consult√≥rio High Ticket. "
    "Mas n√£o se preocupe: nosso conte√∫do est√° sempre em expans√£o! üòä<br><br>"
    "Que tal explorar t√≥picos relacionados, como 'Health Plan', 'Patient Letter' ou 'Plano de A√ß√£o'? "
    "Voc√™ pode reformular sua d√∫vida com base nesses temas ou perguntar sobre qualquer m√≥dulo ou atividade, "
    "e eu ficarei feliz em ajudar com o que estiver ao meu alcance."
)

# -----------------------------
# NORMALIZA√á√ÉO DE CHAVE
# -----------------------------
def normalize_key(text: str) -> str:
    nfkd = unicodedata.normalize("NFD", text)
    ascii_only = "".join(ch for ch in nfkd if unicodedata.category(ch) != "Mn")
    s = ascii_only.lower()
    s = re.sub(r"[^\w\s]", "", s)
    return re.sub(r"\s+", " ", s).strip()

# -----------------------------
# LEITURA DE TRANSCRI√á√ïES
# -----------------------------
BASE_DIR = os.path.dirname(__file__)
try:
    _raw_txt = open(os.path.join(BASE_DIR, "transcricoes.txt"), encoding="utf-8").read()
except FileNotFoundError:
    _raw_txt = ""

# -----------------------------
# FUN√á√ÉO DE BUSCA
# -----------------------------
def search_transcripts(question: str, max_sentences: int = 3) -> str:
    if not _raw_txt:
        return ""
    key = normalize_key(question)
    keywords = [w for w in key.split() if len(w) > 3]
    sentences = re.split(r'(?<=[\.\!\?])\s+', _raw_txt)
    matches = []
    for sent in sentences:
        norm = normalize_key(sent)
        if any(word in norm for word in keywords):
            matches.append(sent.strip())
        if len(matches) >= max_sentences:
            break
    return "<br>".join(matches) if matches else ""

# -----------------------------
# RESPOSTAS CAN√îNICAS
# -----------------------------
TYPE_KEYWORDS = {
    "revisao": ["revis√£o", "revise", "resumir"],
    "precificacao": ["precifica√ß√£o", "precificar", "pre√ßo", "valor", "faturamento"],
    "health_plan": ["health plan", "retorno do investimento", "canva"],
    "aplicacao": ["como aplico", "aplica√ß√£o", "roteiro"],
    "faq": ["quais", "pergunta frequente"],
    "explicacao": ["explique", "o que √©", "defina", "conceito"],
    "plano_de_acao": ["plano de a√ß√£o", "primeira semana"],
    "guia": ["guia do curso", "passo a passo", "cht21"],
    "dossie": ["dossi√™ 007", "acao 1", "acao 2", "acao 3", "orienta√ß√µes finais"],
    "papelaria": ["jo malone", "importadoras", "cafeteiras", "chocolates", "ch√°s"],
    "playlist": ["playlist", "spotify"]
}

CANONICAL_QA = {
    # Senso Est√©tico High Ticket (M√≥dulo 2)
    "como devo decorar meu consultorio e me vestir para nao afastar o paciente high ticket":
        "Decora√ß√£o: espa√ßos clean, m√≥veis de linhas retas, cores neutras (branco, bege, cinza). "
        "Sem polui√ß√£o visual de logos, quadriculados ou ostenta√ß√£o de marcas.<br><br>"
        "Fragr√¢ncia: fragr√¢ncias leves e universais (ex.: Jo Malone ‚ÄúLime Basil & Mandarin‚Äù ou Giovanna Baby), "
        "nada muito doce ou intenso que possa causar enjoo.<br><br>"
        "Uniforme e traje pessoal:<br>"
        "‚Ä¢ Jaleco branco cl√°ssico, sem rendas, mangas bufantes ou logos.<br>"
        "‚Ä¢ Para homem: camisa social clara + cal√ßa de corte tradicional + sapato social ou mocassim discreto.<br>"
        "‚Ä¢ Para mulher: camisa social branca ou tons pastel + cal√ßa ou saia de corte cl√°ssico + sapato fechado ou scarpin neutro.",
    # Gatilho da Reciprocidade (M√≥dulo 3.6)
    "qual a melhor forma de usar o gatilho da reciprocidade para fidelizar meus pacientes":
        "O gatilho da reciprocidade consiste em oferecer algo de valor antes mesmo do paciente pagar, "
        "para que ele sinta vontade de retribuir seu cuidado. Por exemplo: enviar um e-book ou checklist educativo "
        "ap√≥s a consulta, oferecer uma avalia√ß√£o r√°pida de cortesia (como avalia√ß√£o postural) ou disponibilizar um "
        "mini-protocolo gratuito. Assim, quando voc√™ apresentar seu plano principal, o paciente j√° estar√° predisposto "
        "a aceitar essa retribui√ß√£o.",
    # Exemplo Pr√°tico de Reciprocidade
    "pode me dar um exemplo pratico":
        "Claro! Por exemplo, ap√≥s a consulta, voc√™ pode enviar ao paciente um checklist personalizado de exerc√≠cios "
        "ou dicas nutricionais por e-mail. Ou ainda oferecer uma avalia√ß√£o r√°pida de cortesia (avalia√ß√£o postural) na pr√≥xima sess√£o. "
        "Esse gesto simples demonstra cuidado e faz o paciente se sentir inclinado a retribuir contratando o plano completo.",
    # Medo de cobrar mais
    "supero o medo de cobrar mais pelos meus atendimentos sem parecer mercenario":
        "Entender que dinheiro resolve muitos problemas ‚Äî desde investir em atualiza√ß√µes profissionais at√© permitir "
        "que voc√™ dedique mais tempo ao descanso ‚Äî √© o primeiro passo para quebrar esse bloqueio. Lembre-se: quanto "
        "mais voc√™ ganha, mais pessoas voc√™ pode ajudar, seja doando horas de atendimento social ou empregando "
        "colaboradores em seu consult√≥rio. Portanto, ao apresentar seus novos valores, explique ao paciente que esse "
        "ajuste permite oferecer atendimentos mais seguros, atualizados e personalizados ‚Äî e que isso, na pr√°tica, √© um ganho "
        "direto para o cuidado dele.",
    # Gavitigo da Escassez (M√≥dulo 1.7.5)
    "como garantir que meus pacientes nao faltem ou adiem sem aviso":
        "Evite plataformas de agendamento que deixem ‚Äúburacos‚Äù vis√≠veis em sua agenda: isso passa a impress√£o de "
        "disponibilidade total e incentiva o paciente a adiar. Use o gatilho da escassez:<br><br>"
        "‚ÄúTenho apenas dois hor√°rios abertos para novas consultas nas pr√≥ximas duas semanas. Se quiser garantir seu "
        "atendimento, posso encaix√°-lo na ter√ßa ou na quinta-feira.‚Äù<br><br>"
        "Assim, voc√™ demonstra que seu tempo √© valioso, aumenta a percep√ß√£o de prioridade e reduz faltas."
}
CANONICAL_QA_NORMALIZED = {normalize_key(k): v for k, v in CANONICAL_QA.items()}

# -----------------------------
# CLASSIFICADOR E GERADOR DE RESPOSTA
# -----------------------------
def classify_prompt(question: str) -> dict:
    lower = normalize_key(question)
    if any(canon in lower for canon in CANONICAL_QA_NORMALIZED):
        return {"scope": "IN_SCOPE", "type": "faq"}
    for t, kws in TYPE_KEYWORDS.items():
        if any(normalize_key(k) in lower for k in kws):
            return {"scope": "IN_SCOPE", "type": t}
    return {"scope": "OUT_OF_SCOPE", "type": "explicacao"}

def generate_answer(question: str, context: str = "", history: list = None, tipo_de_prompt: str = None) -> str:
    saudacao = random.choice(GREETINGS)
    fechamento = random.choice(CLOSINGS)
    key = normalize_key(question)
    # 1) Resposta can√¥nica
    for canon, resp in CANONICAL_QA_NORMALIZED.items():
        if canon in key:
            return f"{saudacao}<br><br>{resp}<br><br>{fechamento}"
    # 2) Classifica√ß√£o de escopo
    cls = classify_prompt(question)
    # 3) Fallback fora de escopo
    if cls["scope"] == "OUT_OF_SCOPE":
        snippet = search_transcripts(question)
        if snippet:
            return f"{saudacao}<br><br>{snippet}<br><br>{fechamento}"
        return f"{saudacao}<br><br>{OUT_OF_SCOPE_MSG}<br><br>{fechamento}"
    # 4) Prompt din√¢mico
    system_msg = {"role": "system", "content": SYSTEM_PROMPT}
    parts = []
    if context:
        parts.append(f"üìö Contexto:\n{context}")
    if history:
        parts.append("üìú Hist√≥rico:\n" + "\n".join(item['ai'] for item in history))
    parts.append(f"ü§î Pergunta:\n{question}")
    user_msg = {"role": "user", "content": "\n\n".join(parts)}
    # 5) Chamada ao OpenAI
    try:
        r = client.chat.completions.create(
            model="gpt-4",
            messages=[system_msg, user_msg],
            temperature=0.7,
            max_tokens=500
        )
    except OpenAIError:
        r = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[system_msg, user_msg],
            temperature=0.7,
            max_tokens=500
        )
    answer = r.choices[0].message.content.strip()
    return f"{saudacao}<br><br>{answer}<br><br>{fechamento}"
